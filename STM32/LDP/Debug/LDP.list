
LDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c0  080058c0  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  080058c0  080058c0  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058c0  080058c0  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080058c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200000e4  080059ac  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080059ac  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ed  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afe  00000000  00000000  000305fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000330f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00033e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019279  00000000  00000000  00034a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffcb  00000000  00000000  0004dcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b413  00000000  00000000  0005dc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e90a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  000e90fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e4 	.word	0x200000e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800576c 	.word	0x0800576c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e8 	.word	0x200000e8
 800014c:	0800576c 	.word	0x0800576c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <isButtonPressed>:
int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};


/*--------------- Functions -----------------------------------------------------*/
// Determine if button_flag == 1
int isButtonPressed(int index) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <isButtonPressed+0x30>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d106      	bne.n	800096e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <isButtonPressed+0x30>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2100      	movs	r1, #0
 8000966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <isButtonPressed+0x24>
	}
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000100 	.word	0x20000100

08000980 <subKeyProcess>:

// Set flag = 1
void subKeyProcess(int index){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <subKeyProcess+0x1c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2101      	movs	r1, #1
 800098e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000100 	.word	0x20000100

080009a0 <getKeyInput>:

void getKeyInput() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	e0d1      	b.n	8000b50 <getKeyInput+0x1b0>
		KeyReg0[i] = KeyReg1[i];	// Vibrations
 80009ac:	4a6d      	ldr	r2, [pc, #436]	; (8000b64 <getKeyInput+0x1c4>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b4:	496c      	ldr	r1, [pc, #432]	; (8000b68 <getKeyInput+0x1c8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80009bc:	4a6b      	ldr	r2, [pc, #428]	; (8000b6c <getKeyInput+0x1cc>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c4:	4967      	ldr	r1, [pc, #412]	; (8000b64 <getKeyInput+0x1c4>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// Read signals from buttons
		if (i == 0) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10a      	bne.n	80009e8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin); 				// MODE
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	4866      	ldr	r0, [pc, #408]	; (8000b70 <getKeyInput+0x1d0>)
 80009d6:	f001 ff39 	bl	800284c <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	4619      	mov	r1, r3
 80009de:	4a63      	ldr	r2, [pc, #396]	; (8000b6c <getKeyInput+0x1cc>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009e6:	e044      	b.n	8000a72 <getKeyInput+0xd2>
		}
		else if (i == 1) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10b      	bne.n	8000a06 <getKeyInput+0x66>
			KeyReg2[i] = HAL_GPIO_ReadPin(START_UP_GPIO_Port, START_UP_Pin); 		// START_UP
 80009ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f2:	4860      	ldr	r0, [pc, #384]	; (8000b74 <getKeyInput+0x1d4>)
 80009f4:	f001 ff2a 	bl	800284c <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4a5b      	ldr	r2, [pc, #364]	; (8000b6c <getKeyInput+0x1cc>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a04:	e035      	b.n	8000a72 <getKeyInput+0xd2>
		}
		else if (i == 2) {
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d10b      	bne.n	8000a24 <getKeyInput+0x84>
			KeyReg2[i] = HAL_GPIO_ReadPin(STOP_DOWN_GPIO_Port, STOP_DOWN_Pin); 		// STOP_DOWN
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	4858      	ldr	r0, [pc, #352]	; (8000b74 <getKeyInput+0x1d4>)
 8000a12:	f001 ff1b 	bl	800284c <HAL_GPIO_ReadPin>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4a54      	ldr	r2, [pc, #336]	; (8000b6c <getKeyInput+0x1cc>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a22:	e026      	b.n	8000a72 <getKeyInput+0xd2>
		}
		else if (i == 3) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d10b      	bne.n	8000a42 <getKeyInput+0xa2>
			KeyReg2[i] = HAL_GPIO_ReadPin(SAVE_SET_GPIO_Port, SAVE_SET_Pin); 		// SAVE_SET
 8000a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2e:	4852      	ldr	r0, [pc, #328]	; (8000b78 <getKeyInput+0x1d8>)
 8000a30:	f001 ff0c 	bl	800284c <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <getKeyInput+0x1cc>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a40:	e017      	b.n	8000a72 <getKeyInput+0xd2>
		}
		else if (i == 4) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d10a      	bne.n	8000a5e <getKeyInput+0xbe>
			KeyReg2[i] = HAL_GPIO_ReadPin(CLEAR_GPIO_Port, CLEAR_Pin); 				// CLEAR
 8000a48:	2110      	movs	r1, #16
 8000a4a:	484b      	ldr	r0, [pc, #300]	; (8000b78 <getKeyInput+0x1d8>)
 8000a4c:	f001 fefe 	bl	800284c <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4a45      	ldr	r2, [pc, #276]	; (8000b6c <getKeyInput+0x1cc>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a5c:	e009      	b.n	8000a72 <getKeyInput+0xd2>
		}
		else {
			KeyReg2[i] = HAL_GPIO_ReadPin(MEMCALL_GPIO_Port, MEMCALL_Pin); 			// MEMCALL
 8000a5e:	2120      	movs	r1, #32
 8000a60:	4845      	ldr	r0, [pc, #276]	; (8000b78 <getKeyInput+0x1d8>)
 8000a62:	f001 fef3 	bl	800284c <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4a40      	ldr	r2, [pc, #256]	; (8000b6c <getKeyInput+0x1cc>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		// Signal processing
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a72:	4a3c      	ldr	r2, [pc, #240]	; (8000b64 <getKeyInput+0x1c4>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a7a:	493b      	ldr	r1, [pc, #236]	; (8000b68 <getKeyInput+0x1c8>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d15a      	bne.n	8000b3c <getKeyInput+0x19c>
 8000a86:	4a37      	ldr	r2, [pc, #220]	; (8000b64 <getKeyInput+0x1c4>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a8e:	4937      	ldr	r1, [pc, #220]	; (8000b6c <getKeyInput+0x1cc>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d150      	bne.n	8000b3c <getKeyInput+0x19c>
			if (KeyReg3[i] != KeyReg2[i]){
 8000a9a:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <getKeyInput+0x1dc>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa2:	4932      	ldr	r1, [pc, #200]	; (8000b6c <getKeyInput+0x1cc>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d02c      	beq.n	8000b08 <getKeyInput+0x168>
				KeyReg3[i] = KeyReg2[i];
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <getKeyInput+0x1cc>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab6:	4931      	ldr	r1, [pc, #196]	; (8000b7c <getKeyInput+0x1dc>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 8000abe:	4a2b      	ldr	r2, [pc, #172]	; (8000b6c <getKeyInput+0x1cc>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d13e      	bne.n	8000b48 <getKeyInput+0x1a8>
					subKeyProcess(i);	// Kich timer_flag[i] = 1;
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff58 	bl	8000980 <subKeyProcess>
					if (buttonlong_flag[i] == 0) {
 8000ad0:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <getKeyInput+0x1e0>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10a      	bne.n	8000af2 <getKeyInput+0x152>
						TimeOutForKeyPress[i] = longkeyPress / TIME_CYCLE; 			// Set timer for longPress event
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <getKeyInput+0x1e4>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <getKeyInput+0x1e8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000ae8:	4928      	ldr	r1, [pc, #160]	; (8000b8c <getKeyInput+0x1ec>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000af0:	e02a      	b.n	8000b48 <getKeyInput+0x1a8>
					}
					else {
						TimeOutForKeyPress[i] = change_statelongkey / TIME_CYCLE;  	// Set timer for change_statelongPress
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <getKeyInput+0x1f0>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <getKeyInput+0x1e8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	fb92 f2f3 	sdiv	r2, r2, r3
 8000afe:	4923      	ldr	r1, [pc, #140]	; (8000b8c <getKeyInput+0x1ec>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000b06:	e01f      	b.n	8000b48 <getKeyInput+0x1a8>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 8000b08:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <getKeyInput+0x1ec>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	491e      	ldr	r1, [pc, #120]	; (8000b8c <getKeyInput+0x1ec>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				// If after the TimeOutForKeyPress first period, the button is open, then buttonlong_flag[i] = 1, otherwise it = 0.
				if (TimeOutForKeyPress[i] == 0){
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <getKeyInput+0x1ec>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d110      	bne.n	8000b48 <getKeyInput+0x1a8>
					KeyReg3[i] = NORMAL_STATE;
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <getKeyInput+0x1dc>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					buttonlong_flag[i] = 1;
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <getKeyInput+0x1e0>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2101      	movs	r1, #1
 8000b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000b3a:	e005      	b.n	8000b48 <getKeyInput+0x1a8>
				}
			}
		}
		else {
			buttonlong_flag[i] = 0;
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <getKeyInput+0x1e0>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2100      	movs	r1, #0
 8000b42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b46:	e000      	b.n	8000b4a <getKeyInput+0x1aa>
			if (KeyReg3[i] != KeyReg2[i]){
 8000b48:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	f77f af2a 	ble.w	80009ac <getKeyInput+0xc>
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000020 	.word	0x20000020
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000038 	.word	0x20000038
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	20000050 	.word	0x20000050
 8000b80:	20000118 	.word	0x20000118
 8000b84:	20000000 	.word	0x20000000
 8000b88:	200002a0 	.word	0x200002a0
 8000b8c:	20000130 	.word	0x20000130
 8000b90:	20000004 	.word	0x20000004

08000b94 <clear_display>:

TIM_HandleTypeDef htim3;

/*--------------- Functions display --------------------------*/
// Reset LCD
void clear_display() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <clear_display+0x2c>)
 8000b9e:	f000 fd27 	bl	80015f0 <Lcd_cursor>
	Lcd_string(&lcd, "                ");
 8000ba2:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <clear_display+0x30>)
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <clear_display+0x2c>)
 8000ba6:	f000 fd04 	bl	80015b2 <Lcd_string>
	Lcd_cursor(&lcd, 1, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2101      	movs	r1, #1
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <clear_display+0x2c>)
 8000bb0:	f000 fd1e 	bl	80015f0 <Lcd_cursor>
	Lcd_string(&lcd, "                ");
 8000bb4:	4903      	ldr	r1, [pc, #12]	; (8000bc4 <clear_display+0x30>)
 8000bb6:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <clear_display+0x2c>)
 8000bb8:	f000 fcfb 	bl	80015b2 <Lcd_string>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001d0 	.word	0x200001d0
 8000bc4:	08005784 	.word	0x08005784

08000bc8 <display_fsm_time>:

// Display type of mode and time at this mode
void display_fsm_time(char* cmd, TIME_STRUCT time) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Lcd_cursor(&lcd, 0, 3);
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4810      	ldr	r0, [pc, #64]	; (8000c1c <display_fsm_time+0x54>)
 8000bdc:	f000 fd08 	bl	80015f0 <Lcd_cursor>
	Lcd_string(&lcd, cmd);
 8000be0:	68f9      	ldr	r1, [r7, #12]
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <display_fsm_time+0x54>)
 8000be4:	f000 fce5 	bl	80015b2 <Lcd_string>
	Lcd_cursor(&lcd, 1, 3);
 8000be8:	2203      	movs	r2, #3
 8000bea:	2101      	movs	r1, #1
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <display_fsm_time+0x54>)
 8000bee:	f000 fcff 	bl	80015f0 <Lcd_cursor>
	char count_time[10];
	sprintf((char*)count_time,"%02d:%02d:%02d", time.hour, time.min, time.sec);
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f107 0014 	add.w	r0, r7, #20
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <display_fsm_time+0x58>)
 8000c02:	f004 f979 	bl	8004ef8 <siprintf>
	Lcd_string(&lcd, count_time);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <display_fsm_time+0x54>)
 8000c0e:	f000 fcd0 	bl	80015b2 <Lcd_string>
}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001d0 	.word	0x200001d0
 8000c20:	08005798 	.word	0x08005798

08000c24 <fsm_init>:



/*--------------- Functions fsm --------------------------*/
// Init variables fsm
void fsm_init() {
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
	sport_time = time_init(sport_time);		// Mode 2 - counter
 8000c2a:	4c1d      	ldr	r4, [pc, #116]	; (8000ca0 <fsm_init+0x7c>)
 8000c2c:	4638      	mov	r0, r7
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <fsm_init+0x7c>)
 8000c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c32:	f000 fc2b 	bl	800148c <time_init>
 8000c36:	463b      	mov	r3, r7
 8000c38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mem1_time = time_init(mem1_time);		// Mode 2 - memcall1
 8000c40:	4c18      	ldr	r4, [pc, #96]	; (8000ca4 <fsm_init+0x80>)
 8000c42:	4638      	mov	r0, r7
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <fsm_init+0x80>)
 8000c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c48:	f000 fc20 	bl	800148c <time_init>
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mem2_time = time_init(mem2_time);		// Mode 2 - memcall2
 8000c56:	4c14      	ldr	r4, [pc, #80]	; (8000ca8 <fsm_init+0x84>)
 8000c58:	4638      	mov	r0, r7
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <fsm_init+0x84>)
 8000c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5e:	f000 fc15 	bl	800148c <time_init>
 8000c62:	463b      	mov	r3, r7
 8000c64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mem3_time = time_init(mem3_time);		// Mode 2 - memcall3
 8000c6c:	4c0f      	ldr	r4, [pc, #60]	; (8000cac <fsm_init+0x88>)
 8000c6e:	4638      	mov	r0, r7
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <fsm_init+0x88>)
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	f000 fc0a 	bl	800148c <time_init>
 8000c78:	463b      	mov	r3, r7
 8000c7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	alarm_time = time_init(alarm_time);		// Mode 3 - alarm
 8000c82:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <fsm_init+0x8c>)
 8000c84:	4638      	mov	r0, r7
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <fsm_init+0x8c>)
 8000c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8a:	f000 fbff 	bl	800148c <time_init>
 8000c8e:	463b      	mov	r3, r7
 8000c90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	20000210 	.word	0x20000210
 8000ca4:	20000200 	.word	0x20000200
 8000ca8:	20000220 	.word	0x20000220
 8000cac:	200001e8 	.word	0x200001e8
 8000cb0:	200001f4 	.word	0x200001f4

08000cb4 <update_real_time>:

void update_real_time() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	if (timer_flag[0] == 1) {
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <update_real_time+0x20>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d106      	bne.n	8000cce <update_real_time+0x1a>
		setTimer(0, 1000);
 8000cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f001 f8c7 	bl	8001e58 <setTimer>
		get_time();
 8000cca:	f001 f861 	bl	8001d90 <get_time>
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000168 	.word	0x20000168

08000cd8 <fsm_clock>:

// FSM Clock
void fsm_clock() {
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
	// Update real-time
//	if (timer_flag[0] == 1) {
//		setTimer(0, 1000);
//		get_time();
		// Compare alarm time to occur ALARM event
		if (alarm_flag == 1) {
 8000cde:	4b71      	ldr	r3, [pc, #452]	; (8000ea4 <fsm_clock+0x1cc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d125      	bne.n	8000d32 <fsm_clock+0x5a>
			if (rTime.Hours == alarm_time.hour &&
 8000ce6:	4b70      	ldr	r3, [pc, #448]	; (8000ea8 <fsm_clock+0x1d0>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <fsm_clock+0x1d4>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d11e      	bne.n	8000d32 <fsm_clock+0x5a>
				rTime.Minutes == alarm_time.min &&
 8000cf4:	4b6c      	ldr	r3, [pc, #432]	; (8000ea8 <fsm_clock+0x1d0>)
 8000cf6:	785b      	ldrb	r3, [r3, #1]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b6c      	ldr	r3, [pc, #432]	; (8000eac <fsm_clock+0x1d4>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
			if (rTime.Hours == alarm_time.hour &&
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d117      	bne.n	8000d32 <fsm_clock+0x5a>
				rTime.Seconds == alarm_time.sec) {
 8000d02:	4b69      	ldr	r3, [pc, #420]	; (8000ea8 <fsm_clock+0x1d0>)
 8000d04:	789b      	ldrb	r3, [r3, #2]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b68      	ldr	r3, [pc, #416]	; (8000eac <fsm_clock+0x1d4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
				rTime.Minutes == alarm_time.min &&
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d110      	bne.n	8000d32 <fsm_clock+0x5a>
				alarm_flag = 2;
 8000d10:	4b64      	ldr	r3, [pc, #400]	; (8000ea4 <fsm_clock+0x1cc>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	601a      	str	r2, [r3, #0]
				setTimer(2, 30000);
 8000d16:	f247 5130 	movw	r1, #30000	; 0x7530
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f001 f89c 	bl	8001e58 <setTimer>
				setTimer(3, 1000);
 8000d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d24:	2003      	movs	r0, #3
 8000d26:	f001 f897 	bl	8001e58 <setTimer>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 60);
 8000d2a:	4b61      	ldr	r3, [pc, #388]	; (8000eb0 <fsm_clock+0x1d8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	223c      	movs	r2, #60	; 0x3c
 8000d30:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
//	}
	// Counter sport-clock (if running)
	if (m2_run == 1) {
 8000d32:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <fsm_clock+0x1dc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d113      	bne.n	8000d62 <fsm_clock+0x8a>
		if (timer_flag[1] == 1) {
 8000d3a:	4b5f      	ldr	r3, [pc, #380]	; (8000eb8 <fsm_clock+0x1e0>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10f      	bne.n	8000d62 <fsm_clock+0x8a>
			setTimer(1, 1000);
 8000d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d46:	2001      	movs	r0, #1
 8000d48:	f001 f886 	bl	8001e58 <setTimer>
			sport_time = time_update(sport_time);
 8000d4c:	4c5b      	ldr	r4, [pc, #364]	; (8000ebc <fsm_clock+0x1e4>)
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <fsm_clock+0x1e4>)
 8000d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d54:	f000 fbb3 	bl	80014be <time_update>
 8000d58:	463b      	mov	r3, r7
 8000d5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
	}
	// Control toggle buzzer alarm time (if buzzer running)
	if (timer_flag[3] == 1) {
 8000d62:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <fsm_clock+0x1e0>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10b      	bne.n	8000d82 <fsm_clock+0xaa>
		setTimer(4, 1000);
 8000d6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f001 f872 	bl	8001e58 <setTimer>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <fsm_clock+0x1d8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
		clearTimer(3);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f001 f889 	bl	8001e94 <clearTimer>
	}
	if (timer_flag[4] == 1) {
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <fsm_clock+0x1e0>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d10b      	bne.n	8000da2 <fsm_clock+0xca>
		setTimer(3, 1000);
 8000d8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f001 f862 	bl	8001e58 <setTimer>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 60);
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <fsm_clock+0x1d8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	223c      	movs	r2, #60	; 0x3c
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
		clearTimer(4);
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f001 f879 	bl	8001e94 <clearTimer>
	}
	// CLEAR buzzer
	if (isButtonPressed(4) == 1 || timer_flag[2] == 1) {
 8000da2:	2004      	movs	r0, #4
 8000da4:	f7ff fdd2 	bl	800094c <isButtonPressed>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d003      	beq.n	8000db6 <fsm_clock+0xde>
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <fsm_clock+0x1e0>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10c      	bne.n	8000dd0 <fsm_clock+0xf8>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000db6:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <fsm_clock+0x1d8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
		clearTimer(3);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f001 f868 	bl	8001e94 <clearTimer>
		clearTimer(4);
 8000dc4:	2004      	movs	r0, #4
 8000dc6:	f001 f865 	bl	8001e94 <clearTimer>
		alarm_flag = 1;
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <fsm_clock+0x1cc>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
	}

//----- Big FSM Clock -----
	switch(status){
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <fsm_clock+0x1e8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d85c      	bhi.n	8000e92 <fsm_clock+0x1ba>
 8000dd8:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <fsm_clock+0x108>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000df1 	.word	0x08000df1
 8000de4:	08000df9 	.word	0x08000df9
 8000de8:	08000e55 	.word	0x08000e55
 8000dec:	08000e71 	.word	0x08000e71
	case INIT:
		status = MODE1;
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <fsm_clock+0x1e8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
		break;
 8000df6:	e051      	b.n	8000e9c <fsm_clock+0x1c4>
// MODE 1: REAL CLOCK
	case MODE1:
		display_time();
 8000df8:	f001 f806 	bl	8001e08 <display_time>
		// MODE
		if (isButtonPressed(0) == 1) {
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fda5 	bl	800094c <isButtonPressed>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d10f      	bne.n	8000e28 <fsm_clock+0x150>
			status = MODE2;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <fsm_clock+0x1e8>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	601a      	str	r2, [r3, #0]
			if (m2_run == 1) m2_status = COUNT_CHANGE;
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <fsm_clock+0x1dc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d103      	bne.n	8000e1e <fsm_clock+0x146>
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <fsm_clock+0x1ec>)
 8000e18:	2216      	movs	r2, #22
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	e002      	b.n	8000e24 <fsm_clock+0x14c>
			else m2_status = COUNT_PER;
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <fsm_clock+0x1ec>)
 8000e20:	2215      	movs	r2, #21
 8000e22:	601a      	str	r2, [r3, #0]
			clear_display();
 8000e24:	f7ff feb6 	bl	8000b94 <clear_display>
		}
		// Don't use another buttons
		if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1 ||
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fd8f 	bl	800094c <isButtonPressed>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d030      	beq.n	8000e96 <fsm_clock+0x1be>
 8000e34:	2002      	movs	r0, #2
 8000e36:	f7ff fd89 	bl	800094c <isButtonPressed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d02a      	beq.n	8000e96 <fsm_clock+0x1be>
			isButtonPressed(3) == 1 ||  isButtonPressed(5) == 1) {}
 8000e40:	2003      	movs	r0, #3
 8000e42:	f7ff fd83 	bl	800094c <isButtonPressed>
 8000e46:	4603      	mov	r3, r0
		if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1 ||
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d024      	beq.n	8000e96 <fsm_clock+0x1be>
			isButtonPressed(3) == 1 ||  isButtonPressed(5) == 1) {}
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f7ff fd7d 	bl	800094c <isButtonPressed>
		break;
 8000e52:	e020      	b.n	8000e96 <fsm_clock+0x1be>
// MODE 2: REAL CLOCK
	case MODE2:
		fsm_sport_clock();
 8000e54:	f000 f838 	bl	8000ec8 <fsm_sport_clock>
		// MODE
		if (isButtonPressed(0) == 1) {
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fd77 	bl	800094c <isButtonPressed>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d11a      	bne.n	8000e9a <fsm_clock+0x1c2>
			status = MODE3;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <fsm_clock+0x1e8>)
 8000e66:	2203      	movs	r2, #3
 8000e68:	601a      	str	r2, [r3, #0]
			clear_display();
 8000e6a:	f7ff fe93 	bl	8000b94 <clear_display>
		}
		break;
 8000e6e:	e014      	b.n	8000e9a <fsm_clock+0x1c2>
// MODE 3: REAL CLOCK
	case MODE3:
		fsm_alarm_clock();
 8000e70:	f000 f9fc 	bl	800126c <fsm_alarm_clock>
		// MODE
		if (isButtonPressed(0) == 1) {
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fd69 	bl	800094c <isButtonPressed>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d104      	bne.n	8000e8a <fsm_clock+0x1b2>
			status = MODE1;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <fsm_clock+0x1e8>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
			clear_display();
 8000e86:	f7ff fe85 	bl	8000b94 <clear_display>
		}
		// MEMCALL (don't use)
		if (isButtonPressed(5) == 1) {}
 8000e8a:	2005      	movs	r0, #5
 8000e8c:	f7ff fd5e 	bl	800094c <isButtonPressed>
		break;
 8000e90:	e004      	b.n	8000e9c <fsm_clock+0x1c4>
	default:
		break;
 8000e92:	bf00      	nop
 8000e94:	e002      	b.n	8000e9c <fsm_clock+0x1c4>
		break;
 8000e96:	bf00      	nop
 8000e98:	e000      	b.n	8000e9c <fsm_clock+0x1c4>
		break;
 8000e9a:	bf00      	nop
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000148 	.word	0x20000148
 8000ea8:	2000021c 	.word	0x2000021c
 8000eac:	200001f4 	.word	0x200001f4
 8000eb0:	20000188 	.word	0x20000188
 8000eb4:	20000150 	.word	0x20000150
 8000eb8:	20000168 	.word	0x20000168
 8000ebc:	20000210 	.word	0x20000210
 8000ec0:	2000014c 	.word	0x2000014c
 8000ec4:	2000006c 	.word	0x2000006c

08000ec8 <fsm_sport_clock>:


/*--------------------------------------------------------------------------------------------------------------------------------------*/
//----- Small FSM in MODE 2: SPORT CLOCK -----
int index_m = 1;
void fsm_sport_clock(){
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
	switch(m2_status){
 8000ece:	4bb0      	ldr	r3, [pc, #704]	; (8001190 <fsm_sport_clock+0x2c8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3b15      	subs	r3, #21
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	f200 81ba 	bhi.w	800124e <fsm_sport_clock+0x386>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <fsm_sport_clock+0x18>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000ef5 	.word	0x08000ef5
 8000ee4:	08000fdb 	.word	0x08000fdb
 8000ee8:	08001093 	.word	0x08001093
 8000eec:	08001111 	.word	0x08001111
 8000ef0:	080011c1 	.word	0x080011c1
	case COUNT_PER:
		display_fsm_time("SPORT MODE", sport_time);
 8000ef4:	4ba7      	ldr	r3, [pc, #668]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	48a7      	ldr	r0, [pc, #668]	; (8001198 <fsm_sport_clock+0x2d0>)
 8000efa:	f7ff fe65 	bl	8000bc8 <display_fsm_time>
		// START
		if (isButtonPressed(1) == 1) {
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fd24 	bl	800094c <isButtonPressed>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10c      	bne.n	8000f24 <fsm_sport_clock+0x5c>
			m2_status = COUNT_CHANGE;
 8000f0a:	4ba1      	ldr	r3, [pc, #644]	; (8001190 <fsm_sport_clock+0x2c8>)
 8000f0c:	2216      	movs	r2, #22
 8000f0e:	601a      	str	r2, [r3, #0]
			m2_run = 1;
 8000f10:	4ba2      	ldr	r3, [pc, #648]	; (800119c <fsm_sport_clock+0x2d4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000);
 8000f16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f000 ff9c 	bl	8001e58 <setTimer>
			clear_display();
 8000f20:	f7ff fe38 	bl	8000b94 <clear_display>
		}
		// SAVE
		if (isButtonPressed(3) == 1) {
 8000f24:	2003      	movs	r0, #3
 8000f26:	f7ff fd11 	bl	800094c <isButtonPressed>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d131      	bne.n	8000f94 <fsm_sport_clock+0xcc>
			switch(index_m){
 8000f30:	4b9b      	ldr	r3, [pc, #620]	; (80011a0 <fsm_sport_clock+0x2d8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d018      	beq.n	8000f6a <fsm_sport_clock+0xa2>
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	dc1f      	bgt.n	8000f7c <fsm_sport_clock+0xb4>
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d002      	beq.n	8000f46 <fsm_sport_clock+0x7e>
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d009      	beq.n	8000f58 <fsm_sport_clock+0x90>
				case 3:
					mem3_time = sport_time;
					index_m = 1;
					break;
				default:
					break;
 8000f44:	e01a      	b.n	8000f7c <fsm_sport_clock+0xb4>
					mem1_time = sport_time;
 8000f46:	4b97      	ldr	r3, [pc, #604]	; (80011a4 <fsm_sport_clock+0x2dc>)
 8000f48:	4a92      	ldr	r2, [pc, #584]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					index_m = 2;
 8000f50:	4b93      	ldr	r3, [pc, #588]	; (80011a0 <fsm_sport_clock+0x2d8>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
					break;
 8000f56:	e012      	b.n	8000f7e <fsm_sport_clock+0xb6>
					mem2_time = sport_time;
 8000f58:	4b93      	ldr	r3, [pc, #588]	; (80011a8 <fsm_sport_clock+0x2e0>)
 8000f5a:	4a8e      	ldr	r2, [pc, #568]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000f5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					index_m = 3;
 8000f62:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <fsm_sport_clock+0x2d8>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	601a      	str	r2, [r3, #0]
					break;
 8000f68:	e009      	b.n	8000f7e <fsm_sport_clock+0xb6>
					mem3_time = sport_time;
 8000f6a:	4b90      	ldr	r3, [pc, #576]	; (80011ac <fsm_sport_clock+0x2e4>)
 8000f6c:	4a89      	ldr	r2, [pc, #548]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000f6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					index_m = 1;
 8000f74:	4b8a      	ldr	r3, [pc, #552]	; (80011a0 <fsm_sport_clock+0x2d8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
					break;
 8000f7a:	e000      	b.n	8000f7e <fsm_sport_clock+0xb6>
					break;
 8000f7c:	bf00      	nop
			}
			sport_time = time_init(sport_time);
 8000f7e:	4c85      	ldr	r4, [pc, #532]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000f80:	4638      	mov	r0, r7
 8000f82:	4b84      	ldr	r3, [pc, #528]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f86:	f000 fa81 	bl	800148c <time_init>
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 8000f94:	2004      	movs	r0, #4
 8000f96:	f7ff fcd9 	bl	800094c <isButtonPressed>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10d      	bne.n	8000fbc <fsm_sport_clock+0xf4>
			sport_time = time_init(sport_time);
 8000fa0:	4c7c      	ldr	r4, [pc, #496]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa8:	f000 fa70 	bl	800148c <time_init>
 8000fac:	463b      	mov	r3, r7
 8000fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			clearTimer(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 ff6c 	bl	8001e94 <clearTimer>
		}
		// MEMCALL
		if (isButtonPressed(5) == 1) {
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f7ff fcc5 	bl	800094c <isButtonPressed>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d104      	bne.n	8000fd2 <fsm_sport_clock+0x10a>
			m2_status = MEM1;
 8000fc8:	4b71      	ldr	r3, [pc, #452]	; (8001190 <fsm_sport_clock+0x2c8>)
 8000fca:	2217      	movs	r2, #23
 8000fcc:	601a      	str	r2, [r3, #0]
			clear_display();
 8000fce:	f7ff fde1 	bl	8000b94 <clear_display>
		}
		// STOP (don't use)
		if (isButtonPressed(2) == 1) {}
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f7ff fcba 	bl	800094c <isButtonPressed>
		break;
 8000fd8:	e13c      	b.n	8001254 <fsm_sport_clock+0x38c>

	case COUNT_CHANGE:
		// Counter sport clock
		display_fsm_time("RUNNING", sport_time);
 8000fda:	4b6e      	ldr	r3, [pc, #440]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fde:	4874      	ldr	r0, [pc, #464]	; (80011b0 <fsm_sport_clock+0x2e8>)
 8000fe0:	f7ff fdf2 	bl	8000bc8 <display_fsm_time>
		if (timer_flag[1] == 1) {
 8000fe4:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <fsm_sport_clock+0x2ec>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d10f      	bne.n	800100c <fsm_sport_clock+0x144>
			setTimer(1, 1000);
 8000fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 ff31 	bl	8001e58 <setTimer>
			sport_time = time_update(sport_time);
 8000ff6:	4c67      	ldr	r4, [pc, #412]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <fsm_sport_clock+0x2cc>)
 8000ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffe:	f000 fa5e 	bl	80014be <time_update>
 8001002:	463b      	mov	r3, r7
 8001004:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
		// STOP
		if (isButtonPressed(2) == 1) {
 800100c:	2002      	movs	r0, #2
 800100e:	f7ff fc9d 	bl	800094c <isButtonPressed>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d10a      	bne.n	800102e <fsm_sport_clock+0x166>
			clearTimer(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f000 ff3b 	bl	8001e94 <clearTimer>
			m2_status = COUNT_PER;
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <fsm_sport_clock+0x2c8>)
 8001020:	2215      	movs	r2, #21
 8001022:	601a      	str	r2, [r3, #0]
			m2_run = 0;
 8001024:	4b5d      	ldr	r3, [pc, #372]	; (800119c <fsm_sport_clock+0x2d4>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
			clear_display();
 800102a:	f7ff fdb3 	bl	8000b94 <clear_display>
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 800102e:	2004      	movs	r0, #4
 8001030:	f7ff fc8c 	bl	800094c <isButtonPressed>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d115      	bne.n	8001066 <fsm_sport_clock+0x19e>
			clearTimer(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 ff2a 	bl	8001e94 <clearTimer>
			sport_time = time_init(sport_time);
 8001040:	4c54      	ldr	r4, [pc, #336]	; (8001194 <fsm_sport_clock+0x2cc>)
 8001042:	4638      	mov	r0, r7
 8001044:	4b53      	ldr	r3, [pc, #332]	; (8001194 <fsm_sport_clock+0x2cc>)
 8001046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001048:	f000 fa20 	bl	800148c <time_init>
 800104c:	463b      	mov	r3, r7
 800104e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			m2_status = COUNT_PER;
 8001056:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <fsm_sport_clock+0x2c8>)
 8001058:	2215      	movs	r2, #21
 800105a:	601a      	str	r2, [r3, #0]
			m2_run = 0;
 800105c:	4b4f      	ldr	r3, [pc, #316]	; (800119c <fsm_sport_clock+0x2d4>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
			clear_display();
 8001062:	f7ff fd97 	bl	8000b94 <clear_display>
		}
		// MEMCALL
		if (isButtonPressed(5) == 1) {
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff fc70 	bl	800094c <isButtonPressed>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d104      	bne.n	800107c <fsm_sport_clock+0x1b4>
			m2_status = MEM1;
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <fsm_sport_clock+0x2c8>)
 8001074:	2217      	movs	r2, #23
 8001076:	601a      	str	r2, [r3, #0]
			clear_display();
 8001078:	f7ff fd8c 	bl	8000b94 <clear_display>
		}
		// START and SAVE (don't use)
		if (isButtonPressed(1) == 1 || isButtonPressed(3) == 1) {}
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fc65 	bl	800094c <isButtonPressed>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	f000 80e4 	beq.w	8001252 <fsm_sport_clock+0x38a>
 800108a:	2003      	movs	r0, #3
 800108c:	f7ff fc5e 	bl	800094c <isButtonPressed>
		break;
 8001090:	e0df      	b.n	8001252 <fsm_sport_clock+0x38a>

	case MEM1:
		// Display Memcall1 clock
		display_fsm_time("MEMCALL 1", mem1_time);
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <fsm_sport_clock+0x2dc>)
 8001094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001096:	4848      	ldr	r0, [pc, #288]	; (80011b8 <fsm_sport_clock+0x2f0>)
 8001098:	f7ff fd96 	bl	8000bc8 <display_fsm_time>
		// START
		if (isButtonPressed(1) == 1) {
 800109c:	2001      	movs	r0, #1
 800109e:	f7ff fc55 	bl	800094c <isButtonPressed>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d107      	bne.n	80010b8 <fsm_sport_clock+0x1f0>
			setTimer(1, 1000);
 80010a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 fed3 	bl	8001e58 <setTimer>
			m2_run = 1;
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <fsm_sport_clock+0x2d4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
		}
		// STOP
		if (isButtonPressed(2) == 1) {
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff fc47 	bl	800094c <isButtonPressed>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d105      	bne.n	80010d0 <fsm_sport_clock+0x208>
			clearTimer(1);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fee5 	bl	8001e94 <clearTimer>
			m2_run = 0;
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <fsm_sport_clock+0x2d4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 80010d0:	2004      	movs	r0, #4
 80010d2:	f7ff fc3b 	bl	800094c <isButtonPressed>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10a      	bne.n	80010f2 <fsm_sport_clock+0x22a>
			mem1_time = time_init(mem1_time);
 80010dc:	4c31      	ldr	r4, [pc, #196]	; (80011a4 <fsm_sport_clock+0x2dc>)
 80010de:	4638      	mov	r0, r7
 80010e0:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <fsm_sport_clock+0x2dc>)
 80010e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e4:	f000 f9d2 	bl	800148c <time_init>
 80010e8:	463b      	mov	r3, r7
 80010ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
		// MEMCALL
		if (isButtonPressed(5) == 1) {
 80010f2:	2005      	movs	r0, #5
 80010f4:	f7ff fc2a 	bl	800094c <isButtonPressed>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d104      	bne.n	8001108 <fsm_sport_clock+0x240>
			m2_status = MEM2;
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <fsm_sport_clock+0x2c8>)
 8001100:	2218      	movs	r2, #24
 8001102:	601a      	str	r2, [r3, #0]
			clear_display();
 8001104:	f7ff fd46 	bl	8000b94 <clear_display>
		}
		// SAVE (don't use)
		if (isButtonPressed(3) == 1) {}
 8001108:	2003      	movs	r0, #3
 800110a:	f7ff fc1f 	bl	800094c <isButtonPressed>
		break;
 800110e:	e0a1      	b.n	8001254 <fsm_sport_clock+0x38c>

	case MEM2:
		// Display Memcall2 clock
		display_fsm_time("MEMCALL 2", mem2_time);
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <fsm_sport_clock+0x2e0>)
 8001112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001114:	4829      	ldr	r0, [pc, #164]	; (80011bc <fsm_sport_clock+0x2f4>)
 8001116:	f7ff fd57 	bl	8000bc8 <display_fsm_time>
		// START
		if (isButtonPressed(1) == 1) {
 800111a:	2001      	movs	r0, #1
 800111c:	f7ff fc16 	bl	800094c <isButtonPressed>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d107      	bne.n	8001136 <fsm_sport_clock+0x26e>
			setTimer(1, 1000);
 8001126:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800112a:	2001      	movs	r0, #1
 800112c:	f000 fe94 	bl	8001e58 <setTimer>
			m2_run = 1;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <fsm_sport_clock+0x2d4>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
		}
		// STOP
		if (isButtonPressed(2) == 1) {
 8001136:	2002      	movs	r0, #2
 8001138:	f7ff fc08 	bl	800094c <isButtonPressed>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d105      	bne.n	800114e <fsm_sport_clock+0x286>
			clearTimer(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f000 fea6 	bl	8001e94 <clearTimer>
			m2_run = 0;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <fsm_sport_clock+0x2d4>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 800114e:	2004      	movs	r0, #4
 8001150:	f7ff fbfc 	bl	800094c <isButtonPressed>
 8001154:	4603      	mov	r3, r0
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10a      	bne.n	8001170 <fsm_sport_clock+0x2a8>
			mem2_time = time_init(mem2_time);
 800115a:	4c13      	ldr	r4, [pc, #76]	; (80011a8 <fsm_sport_clock+0x2e0>)
 800115c:	4638      	mov	r0, r7
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <fsm_sport_clock+0x2e0>)
 8001160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001162:	f000 f993 	bl	800148c <time_init>
 8001166:	463b      	mov	r3, r7
 8001168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800116c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
		// MEMCALL
		if (isButtonPressed(5) == 1) {
 8001170:	2005      	movs	r0, #5
 8001172:	f7ff fbeb 	bl	800094c <isButtonPressed>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d104      	bne.n	8001186 <fsm_sport_clock+0x2be>
			m2_status = MEM3;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <fsm_sport_clock+0x2c8>)
 800117e:	2219      	movs	r2, #25
 8001180:	601a      	str	r2, [r3, #0]
			clear_display();
 8001182:	f7ff fd07 	bl	8000b94 <clear_display>
		}
		// SAVE (don't use)
		if (isButtonPressed(3) == 1) {}
 8001186:	2003      	movs	r0, #3
 8001188:	f7ff fbe0 	bl	800094c <isButtonPressed>
		break;
 800118c:	e062      	b.n	8001254 <fsm_sport_clock+0x38c>
 800118e:	bf00      	nop
 8001190:	2000006c 	.word	0x2000006c
 8001194:	20000210 	.word	0x20000210
 8001198:	080057a8 	.word	0x080057a8
 800119c:	20000150 	.word	0x20000150
 80011a0:	20000068 	.word	0x20000068
 80011a4:	20000200 	.word	0x20000200
 80011a8:	20000220 	.word	0x20000220
 80011ac:	200001e8 	.word	0x200001e8
 80011b0:	080057b4 	.word	0x080057b4
 80011b4:	20000168 	.word	0x20000168
 80011b8:	080057bc 	.word	0x080057bc
 80011bc:	080057c8 	.word	0x080057c8

	case MEM3:
		// Display Memcall3 clock
		display_fsm_time("MEMCALL 3", mem3_time);
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <fsm_sport_clock+0x394>)
 80011c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c4:	4826      	ldr	r0, [pc, #152]	; (8001260 <fsm_sport_clock+0x398>)
 80011c6:	f7ff fcff 	bl	8000bc8 <display_fsm_time>
		// START
		if (isButtonPressed(1) == 1) {
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff fbbe 	bl	800094c <isButtonPressed>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <fsm_sport_clock+0x31e>
			setTimer(1, 1000);
 80011d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 fe3c 	bl	8001e58 <setTimer>
			m2_run = 1;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <fsm_sport_clock+0x39c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
		}
		// STOP
		if (isButtonPressed(2) == 1) {
 80011e6:	2002      	movs	r0, #2
 80011e8:	f7ff fbb0 	bl	800094c <isButtonPressed>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d105      	bne.n	80011fe <fsm_sport_clock+0x336>
			clearTimer(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fe4e 	bl	8001e94 <clearTimer>
			m2_run = 0;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <fsm_sport_clock+0x39c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 80011fe:	2004      	movs	r0, #4
 8001200:	f7ff fba4 	bl	800094c <isButtonPressed>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d10a      	bne.n	8001220 <fsm_sport_clock+0x358>
			mem3_time = time_init(mem3_time);
 800120a:	4c14      	ldr	r4, [pc, #80]	; (800125c <fsm_sport_clock+0x394>)
 800120c:	4638      	mov	r0, r7
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <fsm_sport_clock+0x394>)
 8001210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001212:	f000 f93b 	bl	800148c <time_init>
 8001216:	463b      	mov	r3, r7
 8001218:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800121c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}
		// MEMCALL
		if (isButtonPressed(5) == 1) {
 8001220:	2005      	movs	r0, #5
 8001222:	f7ff fb93 	bl	800094c <isButtonPressed>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10c      	bne.n	8001246 <fsm_sport_clock+0x37e>
			if (m2_run == 1) m2_status = COUNT_CHANGE;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <fsm_sport_clock+0x39c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d103      	bne.n	800123c <fsm_sport_clock+0x374>
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <fsm_sport_clock+0x3a0>)
 8001236:	2216      	movs	r2, #22
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e002      	b.n	8001242 <fsm_sport_clock+0x37a>
			else m2_status = COUNT_PER;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <fsm_sport_clock+0x3a0>)
 800123e:	2215      	movs	r2, #21
 8001240:	601a      	str	r2, [r3, #0]
			clear_display();
 8001242:	f7ff fca7 	bl	8000b94 <clear_display>
		}
		// SAVE (don't use)
		if (isButtonPressed(3) == 1) {}
 8001246:	2003      	movs	r0, #3
 8001248:	f7ff fb80 	bl	800094c <isButtonPressed>
		break;
 800124c:	e002      	b.n	8001254 <fsm_sport_clock+0x38c>

	default:
		break;
 800124e:	bf00      	nop
 8001250:	e000      	b.n	8001254 <fsm_sport_clock+0x38c>
		break;
 8001252:	bf00      	nop
	}
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	200001e8 	.word	0x200001e8
 8001260:	080057d4 	.word	0x080057d4
 8001264:	20000150 	.word	0x20000150
 8001268:	2000006c 	.word	0x2000006c

0800126c <fsm_alarm_clock>:


/*--------------------------------------------------------------------------------------------------------------------------------------*/
//----- Small FSM in MODE 3: ALARM CLOCK -----

void fsm_alarm_clock(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	switch(m3_status){
 8001270:	4b7f      	ldr	r3, [pc, #508]	; (8001470 <fsm_alarm_clock+0x204>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b1f      	subs	r3, #31
 8001276:	2b03      	cmp	r3, #3
 8001278:	f200 80ee 	bhi.w	8001458 <fsm_alarm_clock+0x1ec>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <fsm_alarm_clock+0x18>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	08001295 	.word	0x08001295
 8001288:	080012dd 	.word	0x080012dd
 800128c:	0800135b 	.word	0x0800135b
 8001290:	080013d7 	.word	0x080013d7
	case ALARM_CLOCK:
		// Display alarm clock
		display_fsm_time("ALARM MODE", alarm_time);
 8001294:	4b77      	ldr	r3, [pc, #476]	; (8001474 <fsm_alarm_clock+0x208>)
 8001296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001298:	4877      	ldr	r0, [pc, #476]	; (8001478 <fsm_alarm_clock+0x20c>)
 800129a:	f7ff fc95 	bl	8000bc8 <display_fsm_time>
		// SET
		if (isButtonPressed(3) == 1) {
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff fb54 	bl	800094c <isButtonPressed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d104      	bne.n	80012b4 <fsm_alarm_clock+0x48>
			m3_status = SET_ALARM_HOUR;
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <fsm_alarm_clock+0x204>)
 80012ac:	2220      	movs	r2, #32
 80012ae:	601a      	str	r2, [r3, #0]
			clear_display();
 80012b0:	f7ff fc70 	bl	8000b94 <clear_display>
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 80012b4:	2004      	movs	r0, #4
 80012b6:	f7ff fb49 	bl	800094c <isButtonPressed>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d102      	bne.n	80012c6 <fsm_alarm_clock+0x5a>
			alarm_flag = 0;
 80012c0:	4b6e      	ldr	r3, [pc, #440]	; (800147c <fsm_alarm_clock+0x210>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
		}
		// START and STOP (don't use)
		if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fb40 	bl	800094c <isButtonPressed>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	f000 80c4 	beq.w	800145c <fsm_alarm_clock+0x1f0>
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fb39 	bl	800094c <isButtonPressed>
		break;
 80012da:	e0bf      	b.n	800145c <fsm_alarm_clock+0x1f0>

	case SET_ALARM_HOUR:
		// Display alarm clock
		display_fsm_time("SET HOUR", alarm_time);
 80012dc:	4b65      	ldr	r3, [pc, #404]	; (8001474 <fsm_alarm_clock+0x208>)
 80012de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e0:	4867      	ldr	r0, [pc, #412]	; (8001480 <fsm_alarm_clock+0x214>)
 80012e2:	f7ff fc71 	bl	8000bc8 <display_fsm_time>
		// UP
		if (isButtonPressed(1) == 1) {
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fb30 	bl	800094c <isButtonPressed>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10b      	bne.n	800130a <fsm_alarm_clock+0x9e>
			alarm_time.hour++;
 80012f2:	4b60      	ldr	r3, [pc, #384]	; (8001474 <fsm_alarm_clock+0x208>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <fsm_alarm_clock+0x208>)
 80012fa:	6093      	str	r3, [r2, #8]
			if (alarm_time.hour >= 24) alarm_time.hour = 0;
 80012fc:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <fsm_alarm_clock+0x208>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b17      	cmp	r3, #23
 8001302:	dd02      	ble.n	800130a <fsm_alarm_clock+0x9e>
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <fsm_alarm_clock+0x208>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
		}
		// DOWN
		if (isButtonPressed(2) == 1) {
 800130a:	2002      	movs	r0, #2
 800130c:	f7ff fb1e 	bl	800094c <isButtonPressed>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10b      	bne.n	800132e <fsm_alarm_clock+0xc2>
			alarm_time.hour--;
 8001316:	4b57      	ldr	r3, [pc, #348]	; (8001474 <fsm_alarm_clock+0x208>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	3b01      	subs	r3, #1
 800131c:	4a55      	ldr	r2, [pc, #340]	; (8001474 <fsm_alarm_clock+0x208>)
 800131e:	6093      	str	r3, [r2, #8]
			if (alarm_time.hour < 0) alarm_time.hour = 23;
 8001320:	4b54      	ldr	r3, [pc, #336]	; (8001474 <fsm_alarm_clock+0x208>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	da02      	bge.n	800132e <fsm_alarm_clock+0xc2>
 8001328:	4b52      	ldr	r3, [pc, #328]	; (8001474 <fsm_alarm_clock+0x208>)
 800132a:	2217      	movs	r2, #23
 800132c:	609a      	str	r2, [r3, #8]
		}
		// SET
		if (isButtonPressed(3) == 1) {
 800132e:	2003      	movs	r0, #3
 8001330:	f7ff fb0c 	bl	800094c <isButtonPressed>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d104      	bne.n	8001344 <fsm_alarm_clock+0xd8>
			m3_status = SET_ALARM_MINUTE;
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <fsm_alarm_clock+0x204>)
 800133c:	2221      	movs	r2, #33	; 0x21
 800133e:	601a      	str	r2, [r3, #0]
			clear_display();
 8001340:	f7ff fc28 	bl	8000b94 <clear_display>
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 8001344:	2004      	movs	r0, #4
 8001346:	f7ff fb01 	bl	800094c <isButtonPressed>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 8087 	bne.w	8001460 <fsm_alarm_clock+0x1f4>
			alarm_time.hour = 0;
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <fsm_alarm_clock+0x208>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
		}
		break;
 8001358:	e082      	b.n	8001460 <fsm_alarm_clock+0x1f4>


	case SET_ALARM_MINUTE:
		// Display alarm clock
		display_fsm_time("SET MINUTE", alarm_time);
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <fsm_alarm_clock+0x208>)
 800135c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135e:	4849      	ldr	r0, [pc, #292]	; (8001484 <fsm_alarm_clock+0x218>)
 8001360:	f7ff fc32 	bl	8000bc8 <display_fsm_time>
		// UP
		if (isButtonPressed(1) == 1) {
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff faf1 	bl	800094c <isButtonPressed>
 800136a:	4603      	mov	r3, r0
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10b      	bne.n	8001388 <fsm_alarm_clock+0x11c>
			alarm_time.min++;
 8001370:	4b40      	ldr	r3, [pc, #256]	; (8001474 <fsm_alarm_clock+0x208>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	3301      	adds	r3, #1
 8001376:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <fsm_alarm_clock+0x208>)
 8001378:	6053      	str	r3, [r2, #4]
			if (alarm_time.min >= 60) alarm_time.min = 0;
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <fsm_alarm_clock+0x208>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b3b      	cmp	r3, #59	; 0x3b
 8001380:	dd02      	ble.n	8001388 <fsm_alarm_clock+0x11c>
 8001382:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <fsm_alarm_clock+0x208>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
		}
		// DOWN
		if (isButtonPressed(2) == 1) {
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fadf 	bl	800094c <isButtonPressed>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10b      	bne.n	80013ac <fsm_alarm_clock+0x140>
			alarm_time.min--;
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <fsm_alarm_clock+0x208>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	3b01      	subs	r3, #1
 800139a:	4a36      	ldr	r2, [pc, #216]	; (8001474 <fsm_alarm_clock+0x208>)
 800139c:	6053      	str	r3, [r2, #4]
			if (alarm_time.min < 0) alarm_time.min = 59;
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <fsm_alarm_clock+0x208>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da02      	bge.n	80013ac <fsm_alarm_clock+0x140>
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <fsm_alarm_clock+0x208>)
 80013a8:	223b      	movs	r2, #59	; 0x3b
 80013aa:	605a      	str	r2, [r3, #4]
		}
		// SET
		if (isButtonPressed(3) == 1) {
 80013ac:	2003      	movs	r0, #3
 80013ae:	f7ff facd 	bl	800094c <isButtonPressed>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d104      	bne.n	80013c2 <fsm_alarm_clock+0x156>
			m3_status = SET_ALARM_SECOND;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <fsm_alarm_clock+0x204>)
 80013ba:	2222      	movs	r2, #34	; 0x22
 80013bc:	601a      	str	r2, [r3, #0]
			clear_display();
 80013be:	f7ff fbe9 	bl	8000b94 <clear_display>
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 80013c2:	2004      	movs	r0, #4
 80013c4:	f7ff fac2 	bl	800094c <isButtonPressed>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d14a      	bne.n	8001464 <fsm_alarm_clock+0x1f8>
			alarm_time.min = 0;
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <fsm_alarm_clock+0x208>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
		}
		break;
 80013d4:	e046      	b.n	8001464 <fsm_alarm_clock+0x1f8>

	case SET_ALARM_SECOND:
		// Display alarm clock
		display_fsm_time("SET SECOND", alarm_time);
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <fsm_alarm_clock+0x208>)
 80013d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013da:	482b      	ldr	r0, [pc, #172]	; (8001488 <fsm_alarm_clock+0x21c>)
 80013dc:	f7ff fbf4 	bl	8000bc8 <display_fsm_time>
		// UP
		if (isButtonPressed(1) == 1) {
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fab3 	bl	800094c <isButtonPressed>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10b      	bne.n	8001404 <fsm_alarm_clock+0x198>
			alarm_time.sec++;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <fsm_alarm_clock+0x208>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a20      	ldr	r2, [pc, #128]	; (8001474 <fsm_alarm_clock+0x208>)
 80013f4:	6013      	str	r3, [r2, #0]
			if (alarm_time.sec >= 60) alarm_time.sec = 0;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <fsm_alarm_clock+0x208>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b3b      	cmp	r3, #59	; 0x3b
 80013fc:	dd02      	ble.n	8001404 <fsm_alarm_clock+0x198>
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <fsm_alarm_clock+0x208>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
		}
		// DOWN
		if (isButtonPressed(2) == 1) {
 8001404:	2002      	movs	r0, #2
 8001406:	f7ff faa1 	bl	800094c <isButtonPressed>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10b      	bne.n	8001428 <fsm_alarm_clock+0x1bc>
			alarm_time.sec--;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <fsm_alarm_clock+0x208>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <fsm_alarm_clock+0x208>)
 8001418:	6013      	str	r3, [r2, #0]
			if (alarm_time.sec < 0) alarm_time.sec = 59;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <fsm_alarm_clock+0x208>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da02      	bge.n	8001428 <fsm_alarm_clock+0x1bc>
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <fsm_alarm_clock+0x208>)
 8001424:	223b      	movs	r2, #59	; 0x3b
 8001426:	601a      	str	r2, [r3, #0]
		}
		// SET
		if (isButtonPressed(3) == 1) {
 8001428:	2003      	movs	r0, #3
 800142a:	f7ff fa8f 	bl	800094c <isButtonPressed>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d107      	bne.n	8001444 <fsm_alarm_clock+0x1d8>
			alarm_flag = 1;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <fsm_alarm_clock+0x210>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
			m3_status = ALARM_CLOCK;
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <fsm_alarm_clock+0x204>)
 800143c:	221f      	movs	r2, #31
 800143e:	601a      	str	r2, [r3, #0]
			clear_display();
 8001440:	f7ff fba8 	bl	8000b94 <clear_display>
		}
		// CLEAR
		if (isButtonPressed(4) == 1) {
 8001444:	2004      	movs	r0, #4
 8001446:	f7ff fa81 	bl	800094c <isButtonPressed>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d10b      	bne.n	8001468 <fsm_alarm_clock+0x1fc>
			alarm_time.sec = 0;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <fsm_alarm_clock+0x208>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
		}
		break;
 8001456:	e007      	b.n	8001468 <fsm_alarm_clock+0x1fc>
	default:
		break;
 8001458:	bf00      	nop
 800145a:	e006      	b.n	800146a <fsm_alarm_clock+0x1fe>
		break;
 800145c:	bf00      	nop
 800145e:	e004      	b.n	800146a <fsm_alarm_clock+0x1fe>
		break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <fsm_alarm_clock+0x1fe>
		break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <fsm_alarm_clock+0x1fe>
		break;
 8001468:	bf00      	nop
	}
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000070 	.word	0x20000070
 8001474:	200001f4 	.word	0x200001f4
 8001478:	080057e0 	.word	0x080057e0
 800147c:	20000148 	.word	0x20000148
 8001480:	080057ec 	.word	0x080057ec
 8001484:	080057f8 	.word	0x080057f8
 8001488:	08005804 	.word	0x08005804

0800148c <time_init>:

#include "global.h"

/*---------------Function init time -------------------------------------------------------*/
// Init or clear time
TIME_STRUCT time_init(TIME_STRUCT time) {
 800148c:	b490      	push	{r4, r7}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	4638      	mov	r0, r7
 8001496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	time.sec = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
	time.min = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
	time.hour = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
	return time;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	461c      	mov	r4, r3
 80014aa:	463b      	mov	r3, r7
 80014ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc90      	pop	{r4, r7}
 80014bc:	4770      	bx	lr

080014be <time_update>:

// Update time (+1s)
TIME_STRUCT time_update(TIME_STRUCT time) {
 80014be:	b490      	push	{r4, r7}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	4638      	mov	r0, r7
 80014c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	time.sec++;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	603b      	str	r3, [r7, #0]
	if (time.sec >= 60) {
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b3b      	cmp	r3, #59	; 0x3b
 80014d6:	dd11      	ble.n	80014fc <time_update+0x3e>
		time.sec = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
		time.min++;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
		if (time.min >= 60) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b3b      	cmp	r3, #59	; 0x3b
 80014e6:	dd09      	ble.n	80014fc <time_update+0x3e>
			time.min = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
			time.hour++;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
			if (time.hour >= 24) time.hour = 0;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b17      	cmp	r3, #23
 80014f6:	dd01      	ble.n	80014fc <time_update+0x3e>
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
		}
	}
	return time;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	461c      	mov	r4, r3
 8001500:	463b      	mov	r3, r7
 8001502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bc90      	pop	{r4, r7}
 8001512:	4770      	bx	lr

08001514 <Lcd_create>:

// Create new Lcd_HandleTypeDef and initialize the LCD
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode) {
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;
	lcd.mode = mode;
 8001522:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	lcd.en_pin = en_pin;
 800152a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800152e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001532:	623b      	str	r3, [r7, #32]
	lcd.rs_pin = rs_pin;
 8001534:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001536:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	61bb      	str	r3, [r7, #24]
	lcd.data_pin = pin;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	613b      	str	r3, [r7, #16]
	Lcd_init(&lcd);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f80e 	bl	800156a <Lcd_init>
	return lcd;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	461d      	mov	r5, r3
 8001552:	f107 0410 	add.w	r4, r7, #16
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}

0800156a <Lcd_init>:

// Initialize 16x2 LCD without cursor
void Lcd_init(Lcd_HandleTypeDef * lcd) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7d9b      	ldrb	r3, [r3, #22]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10b      	bne.n	8001592 <Lcd_init+0x28>
			lcd_write_command(lcd, 0x33);
 800157a:	2133      	movs	r1, #51	; 0x33
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f851 	bl	8001624 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001582:	2132      	movs	r1, #50	; 0x32
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f84d 	bl	8001624 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);		// 4-bit mode
 800158a:	2128      	movs	r1, #40	; 0x28
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f849 	bl	8001624 <lcd_write_command>
	}
//	else														// 8 bit mode (do not use)
//		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001592:	2101      	movs	r1, #1
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f845 	bl	8001624 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800159a:	210c      	movs	r1, #12
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f841 	bl	8001624 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80015a2:	2106      	movs	r1, #6
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f83d 	bl	8001624 <lcd_write_command>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <Lcd_string>:
	sprintf(buffer, "%d", number);
	Lcd_string(lcd, buffer);
}

// Write a string on the current position
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string) {
 80015b2:	b590      	push	{r4, r7, lr}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e00a      	b.n	80015d8 <Lcd_string+0x26>
		lcd_write_data(lcd, string[i]);
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f850 	bl	8001672 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++) {
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	7bfc      	ldrb	r4, [r7, #15]
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7fe fdb8 	bl	8000150 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	429c      	cmp	r4, r3
 80015e4:	d3ed      	bcc.n	80015c2 <Lcd_string+0x10>
	}
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <Lcd_cursor>:

// Set the cursor position
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
 80015fc:	4613      	mov	r3, r2
 80015fe:	70bb      	strb	r3, [r7, #2]
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <Lcd_cursor+0x30>)
 8001604:	5cd2      	ldrb	r2, [r2, r3]
 8001606:	78bb      	ldrb	r3, [r7, #2]
 8001608:	4413      	add	r3, r2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3b80      	subs	r3, #128	; 0x80
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f806 	bl	8001624 <lcd_write_command>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08005870 	.word	0x08005870

08001624 <lcd_write_command>:


/*--------------- Static function definition ---------------------------------------*/

// Write a byte to the command register
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6898      	ldr	r0, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	f001 f91d 	bl	800287a <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7d9b      	ldrb	r3, [r3, #22]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d110      	bne.n	800166a <lcd_write_command+0x46>
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2204      	movs	r2, #4
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f834 	bl	80016c0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2204      	movs	r2, #4
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f82b 	bl	80016c0 <lcd_write>
	}
//	else {																// 8 bit mode (do not use)
//		lcd_write(lcd, command, LCD_BYTE);
//	}
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <lcd_write_data>:

// Write a byte to the data register
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data) {
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6898      	ldr	r0, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	899b      	ldrh	r3, [r3, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	4619      	mov	r1, r3
 800168a:	f001 f8f6 	bl	800287a <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7d9b      	ldrb	r3, [r3, #22]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d110      	bne.n	80016b8 <lcd_write_data+0x46>
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2204      	movs	r2, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f80d 	bl	80016c0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2204      	movs	r2, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f804 	bl	80016c0 <lcd_write>
	}
//	else {																// 8 bit mode (do not use)
//		lcd_write(lcd, data, LCD_BYTE);
//	}
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <lcd_write>:

// Set len bits on the bus and toggle the enable line
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
 80016cc:	4613      	mov	r3, r2
 80016ce:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e019      	b.n	800170a <lcd_write+0x4a>
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	8819      	ldrh	r1, [r3, #0]
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	fa42 f303 	asr.w	r3, r2, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	f001 f8bb 	bl	800287a <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++) {
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	3301      	adds	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	78bb      	ldrb	r3, [r7, #2]
 800170e:	429a      	cmp	r2, r3
 8001710:	d3e1      	bcc.n	80016d6 <lcd_write+0x16>
	}
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6918      	ldr	r0, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8a9b      	ldrh	r3, [r3, #20]
 800171a:	2201      	movs	r2, #1
 800171c:	4619      	mov	r1, r3
 800171e:	f001 f8ac 	bl	800287a <HAL_GPIO_WritePin>
	DELAY(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f000 fddc 	bl	80022e0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 					// Data receive on falling edge
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6918      	ldr	r0, [r3, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	8a9b      	ldrh	r3, [r3, #20]
 8001730:	2200      	movs	r2, #0
 8001732:	4619      	mov	r1, r3
 8001734:	f001 f8a1 	bl	800287a <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b090      	sub	sp, #64	; 0x40
 8001744:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fd69 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f85f 	bl	800180c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f000 fa05 	bl	8001b5c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001752:	f000 f901 	bl	8001958 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001756:	f000 f98b 	bl	8001a70 <MX_TIM3_Init>
  MX_RTC_Init();
 800175a:	f000 f8b1 	bl	80018c0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800175e:	2100      	movs	r1, #0
 8001760:	4823      	ldr	r0, [pc, #140]	; (80017f0 <main+0xb0>)
 8001762:	f002 fd33 	bl	80041cc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001766:	4823      	ldr	r0, [pc, #140]	; (80017f4 <main+0xb4>)
 8001768:	f002 fc86 	bl	8004078 <HAL_TIM_Base_Start_IT>

  /*----------Create LCD--------------------------------*/
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOC, GPIOC, GPIOC };
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <main+0xb8>)
 800176e:	f107 0420 	add.w	r4, r7, #32
 8001772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_8, GPIO_PIN_9};
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <main+0xbc>)
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001782:	e883 0003 	stmia.w	r3, {r0, r1}
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_9, GPIOB, GPIO_PIN_8, LCD_4_BIT_MODE);
 8001786:	4c1e      	ldr	r4, [pc, #120]	; (8001800 <main+0xc0>)
 8001788:	4638      	mov	r0, r7
 800178a:	f107 0218 	add.w	r2, r7, #24
 800178e:	f107 0120 	add.w	r1, r7, #32
 8001792:	2300      	movs	r3, #0
 8001794:	9303      	str	r3, [sp, #12]
 8001796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179a:	9302      	str	r3, [sp, #8]
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <main+0xc4>)
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <main+0xc4>)
 80017a8:	f7ff feb4 	bl	8001514 <Lcd_create>
 80017ac:	4625      	mov	r5, r4
 80017ae:	463c      	mov	r4, r7
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b8:	e885 0003 	stmia.w	r5, {r0, r1}

  /*----------Check RTC---------------------------------*/
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2) {
 80017bc:	2101      	movs	r1, #1
 80017be:	4812      	ldr	r0, [pc, #72]	; (8001808 <main+0xc8>)
 80017c0:	f002 fbee 	bl	8003fa0 <HAL_RTCEx_BKUPRead>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d001      	beq.n	80017d2 <main+0x92>
     set_time();
 80017ce:	f000 faa5 	bl	8001d1c <set_time>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fsm_init();
 80017d2:	f7ff fa27 	bl	8000c24 <fsm_init>
  setTimer(0, 1000);
 80017d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 fb3c 	bl	8001e58 <setTimer>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <main+0xb0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_clock();
 80017e8:	f7ff fa76 	bl	8000cd8 <fsm_clock>
 80017ec:	e7fc      	b.n	80017e8 <main+0xa8>
 80017ee:	bf00      	nop
 80017f0:	20000188 	.word	0x20000188
 80017f4:	20000240 	.word	0x20000240
 80017f8:	08005810 	.word	0x08005810
 80017fc:	08005820 	.word	0x08005820
 8001800:	200001d0 	.word	0x200001d0
 8001804:	40010c00 	.word	0x40010c00
 8001808:	2000022c 	.word	0x2000022c

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001816:	2228      	movs	r2, #40	; 0x28
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fb64 	bl	8004ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800183c:	2303      	movs	r3, #3
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001846:	2301      	movs	r3, #1
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184a:	2310      	movs	r3, #16
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001852:	2300      	movs	r3, #0
 8001854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001856:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001860:	4618      	mov	r0, r3
 8001862:	f001 f851 	bl	8002908 <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800186c:	f000 fa50 	bl	8001d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	230f      	movs	r3, #15
 8001872:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001880:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2102      	movs	r1, #2
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fabb 	bl	8002e08 <HAL_RCC_ClockConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001898:	f000 fa3a 	bl	8001d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800189c:	2301      	movs	r3, #1
 800189e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 80018a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 fc33 	bl	8003114 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80018b4:	f000 fa2c 	bl	8001d10 <Error_Handler>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3750      	adds	r7, #80	; 0x50
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2100      	movs	r1, #0
 80018ca:	460a      	mov	r2, r1
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	460a      	mov	r2, r1
 80018d0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_RTC_Init+0x8c>)
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <MX_RTC_Init+0x90>)
 80018da:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_RTC_Init+0x8c>)
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_RTC_Init+0x8c>)
 80018e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ea:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018ec:	4817      	ldr	r0, [pc, #92]	; (800194c <MX_RTC_Init+0x8c>)
 80018ee:	f001 fd8b 	bl	8003408 <HAL_RTC_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80018f8:	f000 fa0a 	bl	8001d10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 80018fc:	2314      	movs	r3, #20
 80018fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x7;
 8001900:	2307      	movs	r3, #7
 8001902:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2201      	movs	r2, #1
 800190c:	4619      	mov	r1, r3
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <MX_RTC_Init+0x8c>)
 8001910:	f001 fe10 	bl	8003534 <HAL_RTC_SetTime>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800191a:	f000 f9f9 	bl	8001d10 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800191e:	2301      	movs	r3, #1
 8001920:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001922:	2301      	movs	r3, #1
 8001924:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x9;
 8001926:	2309      	movs	r3, #9
 8001928:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 800192a:	2323      	movs	r3, #35	; 0x23
 800192c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800192e:	463b      	mov	r3, r7
 8001930:	2201      	movs	r2, #1
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_RTC_Init+0x8c>)
 8001936:	f001 ff6d 	bl	8003814 <HAL_RTC_SetDate>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001940:	f000 f9e6 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000022c 	.word	0x2000022c
 8001950:	40002800 	.word	0x40002800
 8001954:	00000000 	.word	0x00000000

08001958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <MX_TIM2_Init+0x108>)
 8001976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <MX_TIM2_Init+0x108>)
 800197e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <MX_TIM2_Init+0x108>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800198a:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <MX_TIM2_Init+0x108>)
 800198c:	2209      	movs	r2, #9
 800198e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <MX_TIM2_Init+0x108>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <MX_TIM2_Init+0x108>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199c:	4830      	ldr	r0, [pc, #192]	; (8001a60 <MX_TIM2_Init+0x108>)
 800199e:	f002 fb1b 	bl	8003fd8 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019a8:	f000 f9b2 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	4829      	ldr	r0, [pc, #164]	; (8001a60 <MX_TIM2_Init+0x108>)
 80019ba:	f002 fe6f 	bl	800469c <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019c4:	f000 f9a4 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4822      	ldr	r0, [pc, #136]	; (8001a60 <MX_TIM2_Init+0x108>)
 80019d6:	f003 f9ed 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 f996 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIME_CYCLE = 1/(64e6/(htim2.Init.Prescaler + 1)/(htim2.Init.Period + 1)) * 1000; // Time cycle
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_TIM2_Init+0x108>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fcfa 	bl	80003e4 <__aeabi_ui2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	a118      	add	r1, pc, #96	; (adr r1, 8001a58 <MX_TIM2_Init+0x100>)
 80019f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019fa:	f7fe fe97 	bl	800072c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	461d      	mov	r5, r3
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM2_Init+0x108>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fce9 	bl	80003e4 <__aeabi_ui2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fe87 	bl	800072c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	490f      	ldr	r1, [pc, #60]	; (8001a64 <MX_TIM2_Init+0x10c>)
 8001a28:	f7fe fe80 	bl	800072c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_TIM2_Init+0x110>)
 8001a3a:	f7fe fd4d 	bl	80004d8 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7fe ff59 	bl	80008fc <__aeabi_d2iz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <MX_TIM2_Init+0x114>)
 8001a4e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	418e8480 	.word	0x418e8480
 8001a60:	20000240 	.word	0x20000240
 8001a64:	3ff00000 	.word	0x3ff00000
 8001a68:	408f4000 	.word	0x408f4000
 8001a6c:	200002a0 	.word	0x200002a0

08001a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
 8001a9c:	615a      	str	r2, [r3, #20]
 8001a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001aa2:	4a2d      	ldr	r2, [pc, #180]	; (8001b58 <MX_TIM3_Init+0xe8>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001aa8:	f240 227f 	movw	r2, #639	; 0x27f
 8001aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001ab6:	2263      	movs	r2, #99	; 0x63
 8001ab8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac6:	4823      	ldr	r0, [pc, #140]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001ac8:	f002 fa86 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ad2:	f000 f91d 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481c      	ldr	r0, [pc, #112]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001ae4:	f002 fdda 	bl	800469c <HAL_TIM_ConfigClockSource>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001aee:	f000 f90f 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001af2:	4818      	ldr	r0, [pc, #96]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001af4:	f002 fb12 	bl	800411c <HAL_TIM_PWM_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001afe:	f000 f907 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0a:	f107 0320 	add.w	r3, r7, #32
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4810      	ldr	r0, [pc, #64]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001b12:	f003 f94f 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b1c:	f000 f8f8 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b20:	2360      	movs	r3, #96	; 0x60
 8001b22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	4619      	mov	r1, r3
 8001b36:	4807      	ldr	r0, [pc, #28]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001b38:	f002 fcf2 	bl	8004520 <HAL_TIM_PWM_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b42:	f000 f8e5 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b46:	4803      	ldr	r0, [pc, #12]	; (8001b54 <MX_TIM3_Init+0xe4>)
 8001b48:	f000 fa8a 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001b4c:	bf00      	nop
 8001b4e:	3738      	adds	r7, #56	; 0x38
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000188 	.word	0x20000188
 8001b58:	40000400 	.word	0x40000400

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b70:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a5a      	ldr	r2, [pc, #360]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b58      	ldr	r3, [pc, #352]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b88:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a48      	ldr	r2, [pc, #288]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <MX_GPIO_Init+0x184>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	4843      	ldr	r0, [pc, #268]	; (8001ce4 <MX_GPIO_Init+0x188>)
 8001bd6:	f000 fe50 	bl	800287a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001be0:	4841      	ldr	r0, [pc, #260]	; (8001ce8 <MX_GPIO_Init+0x18c>)
 8001be2:	f000 fe4a 	bl	800287a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001bec:	483f      	ldr	r0, [pc, #252]	; (8001cec <MX_GPIO_Init+0x190>)
 8001bee:	f000 fe44 	bl	800287a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <MX_GPIO_Init+0x194>)
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4838      	ldr	r0, [pc, #224]	; (8001ce8 <MX_GPIO_Init+0x18c>)
 8001c08:	f000 fc9c 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <MX_GPIO_Init+0x188>)
 8001c20:	f000 fc90 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c24:	2320      	movs	r3, #32
 8001c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	482a      	ldr	r0, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0x188>)
 8001c3c:	f000 fc82 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001c40:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <MX_GPIO_Init+0x18c>)
 8001c5a:	f000 fc73 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAVE_SET_Pin CLEAR_Pin MEMCALL_Pin */
  GPIO_InitStruct.Pin = SAVE_SET_Pin|CLEAR_Pin|MEMCALL_Pin;
 8001c5e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4619      	mov	r1, r3
 8001c72:	481e      	ldr	r0, [pc, #120]	; (8001cec <MX_GPIO_Init+0x190>)
 8001c74:	f000 fc66 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4817      	ldr	r0, [pc, #92]	; (8001ce8 <MX_GPIO_Init+0x18c>)
 8001c8c:	f000 fc5a 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_DOWN_Pin START_UP_Pin */
  GPIO_InitStruct.Pin = STOP_DOWN_Pin|START_UP_Pin;
 8001c90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <MX_GPIO_Init+0x188>)
 8001ca6:	f000 fc4d 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480a      	ldr	r0, [pc, #40]	; (8001cec <MX_GPIO_Init+0x190>)
 8001cc4:	f000 fc3e 	bl	8002544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2028      	movs	r0, #40	; 0x28
 8001cce:	f000 fc02 	bl	80024d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd2:	2028      	movs	r0, #40	; 0x28
 8001cd4:	f000 fc1b 	bl	800250e <HAL_NVIC_EnableIRQ>

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40010c00 	.word	0x40010c00
 8001cf0:	10110000 	.word	0x10110000

08001cf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	timerRun();
 8001cfc:	f000 f8e2 	bl	8001ec4 <timerRun>
	getKeyInput();
 8001d00:	f7fe fe4e 	bl	80009a0 <getKeyInput>
	update_real_time();
 8001d04:	f7fe ffd6 	bl	8000cb4 <update_real_time>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <set_time>:


/*---------------- Define public functions -----------------------------------*/

// Set time if write backup register is invalid
void set_time(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	  // Initialize RTC and set the Time and Date
	  rTime.Hours = 0x14;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <set_time+0x68>)
 8001d22:	2214      	movs	r2, #20
 8001d24:	701a      	strb	r2, [r3, #0]
	  rTime.Minutes = 0x7;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <set_time+0x68>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	705a      	strb	r2, [r3, #1]
	  rTime.Seconds = 0x0;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <set_time+0x68>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	709a      	strb	r2, [r3, #2]

	  if (HAL_RTC_SetTime(&hrtc, &rTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d32:	2201      	movs	r2, #1
 8001d34:	4913      	ldr	r1, [pc, #76]	; (8001d84 <set_time+0x68>)
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <set_time+0x6c>)
 8001d38:	f001 fbfc 	bl	8003534 <HAL_RTC_SetTime>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <set_time+0x2a>
	  {
	    Error_Handler();
 8001d42:	f7ff ffe5 	bl	8001d10 <Error_Handler>
	  }
	  rDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <set_time+0x70>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
	  rDate.Month = RTC_MONTH_JANUARY;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <set_time+0x70>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
	  rDate.Date = 0x9;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <set_time+0x70>)
 8001d54:	2209      	movs	r2, #9
 8001d56:	709a      	strb	r2, [r3, #2]
	  rDate.Year = 0x23;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <set_time+0x70>)
 8001d5a:	2223      	movs	r2, #35	; 0x23
 8001d5c:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &rDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	490a      	ldr	r1, [pc, #40]	; (8001d8c <set_time+0x70>)
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <set_time+0x6c>)
 8001d64:	f001 fd56 	bl	8003814 <HAL_RTC_SetDate>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <set_time+0x56>
	  {
	    Error_Handler();
 8001d6e:	f7ff ffcf 	bl	8001d10 <Error_Handler>
	  }

	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  			// Backup register
 8001d72:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001d76:	2101      	movs	r1, #1
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <set_time+0x6c>)
 8001d7a:	f002 f8f7 	bl	8003f6c <HAL_RTCEx_BKUPWrite>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000021c 	.word	0x2000021c
 8001d88:	2000022c 	.word	0x2000022c
 8001d8c:	2000020c 	.word	0x2000020c

08001d90 <get_time>:

// Get time
void get_time(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af02      	add	r7, sp, #8
	  // Get the RTC current Time
	  HAL_RTC_GetTime(&hrtc, &rTime, RTC_FORMAT_BIN);
 8001d96:	2200      	movs	r2, #0
 8001d98:	4914      	ldr	r1, [pc, #80]	; (8001dec <get_time+0x5c>)
 8001d9a:	4815      	ldr	r0, [pc, #84]	; (8001df0 <get_time+0x60>)
 8001d9c:	f001 fc62 	bl	8003664 <HAL_RTC_GetTime>
	  // Get the RTC current Date
	  HAL_RTC_GetDate(&hrtc, &rDate, RTC_FORMAT_BIN);
 8001da0:	2200      	movs	r2, #0
 8001da2:	4914      	ldr	r1, [pc, #80]	; (8001df4 <get_time+0x64>)
 8001da4:	4812      	ldr	r0, [pc, #72]	; (8001df0 <get_time+0x60>)
 8001da6:	f001 fdeb 	bl	8003980 <HAL_RTC_GetDate>

	  // Display time Format: hh:mm:ss
	  sprintf((char*)time,"%02d:%02d:%02d", rTime.Hours, rTime.Minutes, rTime.Seconds);
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <get_time+0x5c>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <get_time+0x5c>)
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <get_time+0x5c>)
 8001db8:	789b      	ldrb	r3, [r3, #2]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <get_time+0x68>)
 8001dc0:	480e      	ldr	r0, [pc, #56]	; (8001dfc <get_time+0x6c>)
 8001dc2:	f003 f899 	bl	8004ef8 <siprintf>

	  // Display date Format: mm-dd-yy
	  // Year is between: 2000 -> 2099
	  sprintf((char*)date,"%02d-%02d-%2d", rDate.Date, rDate.Month, 2000 + rDate.Year);
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <get_time+0x64>)
 8001dc8:	789b      	ldrb	r3, [r3, #2]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <get_time+0x64>)
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <get_time+0x64>)
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <get_time+0x70>)
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <get_time+0x74>)
 8001de2:	f003 f889 	bl	8004ef8 <siprintf>
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000021c 	.word	0x2000021c
 8001df0:	2000022c 	.word	0x2000022c
 8001df4:	2000020c 	.word	0x2000020c
 8001df8:	08005828 	.word	0x08005828
 8001dfc:	20000288 	.word	0x20000288
 8001e00:	08005838 	.word	0x08005838
 8001e04:	20000294 	.word	0x20000294

08001e08 <display_time>:

// Display current date and time
void display_time(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0, 1);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2100      	movs	r1, #0
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <display_time+0x3c>)
 8001e12:	f7ff fbed 	bl	80015f0 <Lcd_cursor>
	Lcd_string(&lcd, "T: ");
 8001e16:	490c      	ldr	r1, [pc, #48]	; (8001e48 <display_time+0x40>)
 8001e18:	480a      	ldr	r0, [pc, #40]	; (8001e44 <display_time+0x3c>)
 8001e1a:	f7ff fbca 	bl	80015b2 <Lcd_string>
	Lcd_string(&lcd, time);
 8001e1e:	490b      	ldr	r1, [pc, #44]	; (8001e4c <display_time+0x44>)
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <display_time+0x3c>)
 8001e22:	f7ff fbc6 	bl	80015b2 <Lcd_string>
	Lcd_cursor(&lcd, 1, 1);
 8001e26:	2201      	movs	r2, #1
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <display_time+0x3c>)
 8001e2c:	f7ff fbe0 	bl	80015f0 <Lcd_cursor>
	Lcd_string(&lcd, "D: ");
 8001e30:	4907      	ldr	r1, [pc, #28]	; (8001e50 <display_time+0x48>)
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <display_time+0x3c>)
 8001e34:	f7ff fbbd 	bl	80015b2 <Lcd_string>
	Lcd_string(&lcd, date);
 8001e38:	4906      	ldr	r1, [pc, #24]	; (8001e54 <display_time+0x4c>)
 8001e3a:	4802      	ldr	r0, [pc, #8]	; (8001e44 <display_time+0x3c>)
 8001e3c:	f7ff fbb9 	bl	80015b2 <Lcd_string>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200001d0 	.word	0x200001d0
 8001e48:	08005848 	.word	0x08005848
 8001e4c:	20000288 	.word	0x20000288
 8001e50:	0800584c 	.word	0x0800584c
 8001e54:	20000294 	.word	0x20000294

08001e58 <setTimer>:
int timer_flag[NUM_OF_TIMERS] = {0};


/*--------------- Functions ------------------------------------------------ */
// setTimer (index: Timer is considered; duration: setTimer time (unit: ms))
void setTimer(int index, int duration) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <setTimer+0x30>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <setTimer+0x34>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <setTimer+0x38>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	200002a0 	.word	0x200002a0
 8001e8c:	20000154 	.word	0x20000154
 8001e90:	20000168 	.word	0x20000168

08001e94 <clearTimer>:

// clearTimer (timer_flag[index] = 0, timer_counter[index] = 0)
void clearTimer(int index) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <clearTimer+0x28>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <clearTimer+0x2c>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000154 	.word	0x20000154
 8001ec0:	20000168 	.word	0x20000168

08001ec4 <timerRun>:

// timerRun
void timerRun(){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	// Use "for" loop to see if it's time to use the Timer
	// With every Timer, the timer_counter cycle will be reduce, if timer_counter == 0 then the timer is disabled, timer_flag is set to state 1.
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	e01c      	b.n	8001f0a <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001ed0:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <timerRun+0x58>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	dd13      	ble.n	8001f04 <timerRun+0x40>
			timer_counter[i]--;
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <timerRun+0x58>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <timerRun+0x58>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <timerRun+0x58>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dc04      	bgt.n	8001f04 <timerRun+0x40>
				timer_flag[i] = 1;
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <timerRun+0x5c>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2101      	movs	r1, #1
 8001f00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	dddf      	ble.n	8001ed0 <timerRun+0xc>
			}
		}
	}
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	20000154 	.word	0x20000154
 8001f20:	20000168 	.word	0x20000168

08001f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_MspInit+0x6c>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_MspInit+0x6c>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_MspInit+0x6c>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_MspInit+0x6c>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_MspInit+0x6c>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_MspInit+0x6c>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2005      	movs	r0, #5
 8001f60:	f000 fab9 	bl	80024d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f64:	2005      	movs	r0, #5
 8001f66:	f000 fad2 	bl	800250e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_MspInit+0x70>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_MspInit+0x70>)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000

08001f98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_RTC_MspInit+0x3c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d110      	bne.n	8001fcc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001faa:	f000 fca1 	bl	80028f0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RTC_MspInit+0x40>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RTC_MspInit+0x40>)
 8001fb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RTC_MspInit+0x40>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RTC_MspInit+0x44>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40002800 	.word	0x40002800
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	4242043c 	.word	0x4242043c

08001fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d114      	bne.n	800201c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	201c      	movs	r0, #28
 8002010:	f000 fa61 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002014:	201c      	movs	r0, #28
 8002016:	f000 fa7a 	bl	800250e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800201a:	e018      	b.n	800204e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <HAL_TIM_Base_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d113      	bne.n	800204e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_TIM_Base_MspInit+0x78>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201d      	movs	r0, #29
 8002044:	f000 fa47 	bl	80024d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002048:	201d      	movs	r0, #29
 800204a:	f000 fa60 	bl	800250e <HAL_NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	40000400 	.word	0x40000400

08002060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_TIM_MspPostInit+0x58>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d117      	bne.n	80020b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_TIM_MspPostInit+0x5c>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_TIM_MspPostInit+0x5c>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_TIM_MspPostInit+0x5c>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002098:	2340      	movs	r3, #64	; 0x40
 800209a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4619      	mov	r1, r3
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <HAL_TIM_MspPostInit+0x60>)
 80020ac:	f000 fa4a 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010800 	.word	0x40010800

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <NMI_Handler+0x4>

080020ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <MemManage_Handler+0x4>

080020d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210a:	f000 f8cd 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}

08002112 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <TIM2_IRQHandler+0x10>)
 8002126:	f002 f8f3 	bl	8004310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000240 	.word	0x20000240

08002134 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <TIM3_IRQHandler+0x10>)
 800213a:	f002 f8e9 	bl	8004310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000188 	.word	0x20000188

08002148 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800214c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002150:	f000 fbac 	bl	80028ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f002 fe84 	bl	8004e94 <__errno>
 800218c:	4603      	mov	r3, r0
 800218e:	220c      	movs	r2, #12
 8002190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20005000 	.word	0x20005000
 80021b8:	00000400 	.word	0x00000400
 80021bc:	2000017c 	.word	0x2000017c
 80021c0:	200002b8 	.word	0x200002b8

080021c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021f6:	f7ff ffe5 	bl	80021c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f002 fe51 	bl	8004ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fe:	f7ff fa9f 	bl	8001740 <main>
  bx lr
 8002202:	4770      	bx	lr
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800220c:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8002210:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8002214:	200002b8 	.word	0x200002b8

08002218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_2_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_Init+0x28>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_Init+0x28>)
 8002226:	f043 0310 	orr.w	r3, r3, #16
 800222a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f947 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	2000      	movs	r0, #0
 8002234:	f000 f808 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fe74 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f95f 	bl	800252a <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f000 f927 	bl	80024d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000074 	.word	0x20000074
 80022a0:	2000007c 	.word	0x2000007c
 80022a4:	20000078 	.word	0x20000078

080022a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_IncTick+0x1c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_IncTick+0x20>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a03      	ldr	r2, [pc, #12]	; (80022c8 <HAL_IncTick+0x20>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	2000007c 	.word	0x2000007c
 80022c8:	200002a4 	.word	0x200002a4

080022cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <HAL_GetTick+0x10>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	200002a4 	.word	0x200002a4

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff fff0 	bl	80022cc <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_Delay+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffe0 	bl	80022cc <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000007c 	.word	0x2000007c

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4906      	ldr	r1, [pc, #24]	; (80023c0 <__NVIC_EnableIRQ+0x34>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100

080023c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	db0a      	blt.n	80023ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <__NVIC_SetPriority+0x4c>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ec:	e00a      	b.n	8002404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4908      	ldr	r1, [pc, #32]	; (8002414 <__NVIC_SetPriority+0x50>)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	3b04      	subs	r3, #4
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	440b      	add	r3, r1
 8002402:	761a      	strb	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f1c3 0307 	rsb	r3, r3, #7
 8002432:	2b04      	cmp	r3, #4
 8002434:	bf28      	it	cs
 8002436:	2304      	movcs	r3, #4
 8002438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3304      	adds	r3, #4
 800243e:	2b06      	cmp	r3, #6
 8002440:	d902      	bls.n	8002448 <NVIC_EncodePriority+0x30>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3b03      	subs	r3, #3
 8002446:	e000      	b.n	800244a <NVIC_EncodePriority+0x32>
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	401a      	ands	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	43d9      	mvns	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	4313      	orrs	r3, r2
         );
}
 8002472:	4618      	mov	r0, r3
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800248c:	d301      	bcc.n	8002492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248e:	2301      	movs	r3, #1
 8002490:	e00f      	b.n	80024b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <SysTick_Config+0x40>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249a:	210f      	movs	r1, #15
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f7ff ff90 	bl	80023c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <SysTick_Config+0x40>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SysTick_Config+0x40>)
 80024ac:	2207      	movs	r2, #7
 80024ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	e000e010 	.word	0xe000e010

080024c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ff2d 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e8:	f7ff ff42 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f7ff ff90 	bl	8002418 <NVIC_EncodePriority>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff5f 	bl	80023c4 <__NVIC_SetPriority>
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff35 	bl	800238c <__NVIC_EnableIRQ>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffa2 	bl	800247c <SysTick_Config>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	; 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e169      	b.n	800282c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002558:	2201      	movs	r2, #1
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8158 	bne.w	8002826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a9a      	ldr	r2, [pc, #616]	; (80027e4 <HAL_GPIO_Init+0x2a0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d05e      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 8002580:	4a98      	ldr	r2, [pc, #608]	; (80027e4 <HAL_GPIO_Init+0x2a0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d875      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 8002586:	4a98      	ldr	r2, [pc, #608]	; (80027e8 <HAL_GPIO_Init+0x2a4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d058      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 800258c:	4a96      	ldr	r2, [pc, #600]	; (80027e8 <HAL_GPIO_Init+0x2a4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d86f      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 8002592:	4a96      	ldr	r2, [pc, #600]	; (80027ec <HAL_GPIO_Init+0x2a8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d052      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 8002598:	4a94      	ldr	r2, [pc, #592]	; (80027ec <HAL_GPIO_Init+0x2a8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d869      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 800259e:	4a94      	ldr	r2, [pc, #592]	; (80027f0 <HAL_GPIO_Init+0x2ac>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04c      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 80025a4:	4a92      	ldr	r2, [pc, #584]	; (80027f0 <HAL_GPIO_Init+0x2ac>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d863      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025aa:	4a92      	ldr	r2, [pc, #584]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d046      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 80025b0:	4a90      	ldr	r2, [pc, #576]	; (80027f4 <HAL_GPIO_Init+0x2b0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d85d      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d82a      	bhi.n	8002610 <HAL_GPIO_Init+0xcc>
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d859      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <HAL_GPIO_Init+0x80>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	0800263f 	.word	0x0800263f
 80025c8:	08002619 	.word	0x08002619
 80025cc:	0800262b 	.word	0x0800262b
 80025d0:	0800266d 	.word	0x0800266d
 80025d4:	08002673 	.word	0x08002673
 80025d8:	08002673 	.word	0x08002673
 80025dc:	08002673 	.word	0x08002673
 80025e0:	08002673 	.word	0x08002673
 80025e4:	08002673 	.word	0x08002673
 80025e8:	08002673 	.word	0x08002673
 80025ec:	08002673 	.word	0x08002673
 80025f0:	08002673 	.word	0x08002673
 80025f4:	08002673 	.word	0x08002673
 80025f8:	08002673 	.word	0x08002673
 80025fc:	08002673 	.word	0x08002673
 8002600:	08002673 	.word	0x08002673
 8002604:	08002673 	.word	0x08002673
 8002608:	08002621 	.word	0x08002621
 800260c:	08002635 	.word	0x08002635
 8002610:	4a79      	ldr	r2, [pc, #484]	; (80027f8 <HAL_GPIO_Init+0x2b4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002616:	e02c      	b.n	8002672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	623b      	str	r3, [r7, #32]
          break;
 800261e:	e029      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	e024      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	3308      	adds	r3, #8
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e01f      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	330c      	adds	r3, #12
 800263a:	623b      	str	r3, [r7, #32]
          break;
 800263c:	e01a      	b.n	8002674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002646:	2304      	movs	r3, #4
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e013      	b.n	8002674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002654:	2308      	movs	r3, #8
 8002656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	611a      	str	r2, [r3, #16]
          break;
 800265e:	e009      	b.n	8002674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002660:	2308      	movs	r3, #8
 8002662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	615a      	str	r2, [r3, #20]
          break;
 800266a:	e003      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x130>
          break;
 8002672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d801      	bhi.n	800267e <HAL_GPIO_Init+0x13a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e001      	b.n	8002682 <HAL_GPIO_Init+0x13e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d802      	bhi.n	8002690 <HAL_GPIO_Init+0x14c>
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	e002      	b.n	8002696 <HAL_GPIO_Init+0x152>
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	3b08      	subs	r3, #8
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	210f      	movs	r1, #15
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401a      	ands	r2, r3
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80b1 	beq.w	8002826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c4:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a4c      	ldr	r2, [pc, #304]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026dc:	4a48      	ldr	r2, [pc, #288]	; (8002800 <HAL_GPIO_Init+0x2bc>)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a40      	ldr	r2, [pc, #256]	; (8002804 <HAL_GPIO_Init+0x2c0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d013      	beq.n	8002730 <HAL_GPIO_Init+0x1ec>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00d      	beq.n	800272c <HAL_GPIO_Init+0x1e8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3e      	ldr	r2, [pc, #248]	; (800280c <HAL_GPIO_Init+0x2c8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x1e4>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a3d      	ldr	r2, [pc, #244]	; (8002810 <HAL_GPIO_Init+0x2cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_GPIO_Init+0x1e0>
 8002720:	2303      	movs	r3, #3
 8002722:	e006      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 8002724:	2304      	movs	r3, #4
 8002726:	e004      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 8002728:	2302      	movs	r3, #2
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_GPIO_Init+0x1ee>
 8002730:	2300      	movs	r3, #0
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4093      	lsls	r3, r2
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002742:	492f      	ldr	r1, [pc, #188]	; (8002800 <HAL_GPIO_Init+0x2bc>)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	492c      	ldr	r1, [pc, #176]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	4928      	ldr	r1, [pc, #160]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 8002774:	4013      	ands	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4922      	ldr	r1, [pc, #136]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	43db      	mvns	r3, r3
 800279a:	491e      	ldr	r1, [pc, #120]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 800279c:	4013      	ands	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4918      	ldr	r1, [pc, #96]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4914      	ldr	r1, [pc, #80]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d021      	beq.n	8002818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
 80027e0:	e021      	b.n	8002826 <HAL_GPIO_Init+0x2e2>
 80027e2:	bf00      	nop
 80027e4:	10320000 	.word	0x10320000
 80027e8:	10310000 	.word	0x10310000
 80027ec:	10220000 	.word	0x10220000
 80027f0:	10210000 	.word	0x10210000
 80027f4:	10120000 	.word	0x10120000
 80027f8:	10110000 	.word	0x10110000
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000
 8002804:	40010800 	.word	0x40010800
 8002808:	40010c00 	.word	0x40010c00
 800280c:	40011000 	.word	0x40011000
 8002810:	40011400 	.word	0x40011400
 8002814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_GPIO_Init+0x304>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	43db      	mvns	r3, r3
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_GPIO_Init+0x304>)
 8002822:	4013      	ands	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f ae8e 	bne.w	8002558 <HAL_GPIO_Init+0x14>
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	372c      	adds	r7, #44	; 0x2c
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e001      	b.n	800286e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	807b      	strh	r3, [r7, #2]
 8002886:	4613      	mov	r3, r2
 8002888:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288a:	787b      	ldrb	r3, [r7, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002890:	887a      	ldrh	r2, [r7, #2]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002896:	e003      	b.n	80028a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	041a      	lsls	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028c2:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f806 	bl	80028dc <HAL_GPIO_EXTI_Callback>
  }
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_PWR_EnableBkUpAccess+0x14>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	420e0020 	.word	0x420e0020

08002908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e26c      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002928:	4b92      	ldr	r3, [pc, #584]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b04      	cmp	r3, #4
 8002932:	d00c      	beq.n	800294e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d112      	bne.n	8002966 <HAL_RCC_OscConfig+0x5e>
 8002940:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d10b      	bne.n	8002966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294e:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d06c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x12c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d168      	bne.n	8002a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e246      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x76>
 8002970:	4b80      	ldr	r3, [pc, #512]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7f      	ldr	r2, [pc, #508]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e02e      	b.n	80029dc <HAL_RCC_OscConfig+0xd4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b7b      	ldr	r3, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7a      	ldr	r2, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 800298c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b78      	ldr	r3, [pc, #480]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a77      	ldr	r2, [pc, #476]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e01d      	b.n	80029dc <HAL_RCC_OscConfig+0xd4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0xbc>
 80029aa:	4b72      	ldr	r3, [pc, #456]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a71      	ldr	r2, [pc, #452]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0xd4>
 80029c4:	4b6b      	ldr	r3, [pc, #428]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a67      	ldr	r2, [pc, #412]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fc72 	bl	80022cc <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff fc6e 	bl	80022cc <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1fa      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0xe4>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fc5e 	bl	80022cc <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff fc5a 	bl	80022cc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1e6      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x10c>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x18c>
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x176>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1ba      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4939      	ldr	r1, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e03a      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fc13 	bl	80022cc <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fc0f 	bl	80022cc <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e19b      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4927      	ldr	r1, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fbf2 	bl	80022cc <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7ff fbee 	bl	80022cc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e17a      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03a      	beq.n	8002b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d019      	beq.n	8002b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_RCC_OscConfig+0x274>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b24:	f7ff fbd2 	bl	80022cc <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fbce 	bl	80022cc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e15a      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f000 fac4 	bl	80030d8 <RCC_Delay>
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_RCC_OscConfig+0x274>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7ff fbb8 	bl	80022cc <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5e:	e00f      	b.n	8002b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff fbb4 	bl	80022cc <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d908      	bls.n	8002b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e140      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	42420000 	.word	0x42420000
 8002b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b9e      	ldr	r3, [pc, #632]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e9      	bne.n	8002b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a6 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b97      	ldr	r3, [pc, #604]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b94      	ldr	r3, [pc, #592]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a93      	ldr	r2, [pc, #588]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	61d3      	str	r3, [r2, #28]
 8002bb6:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	4b8e      	ldr	r3, [pc, #568]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a8a      	ldr	r2, [pc, #552]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7ff fb75 	bl	80022cc <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7ff fb71 	bl	80022cc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	; 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0fd      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x312>
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a7a      	ldr	r2, [pc, #488]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e02d      	b.n	8002c76 <HAL_RCC_OscConfig+0x36e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a75      	ldr	r2, [pc, #468]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a72      	ldr	r2, [pc, #456]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCC_OscConfig+0x36e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x356>
 8002c44:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a6c      	ldr	r2, [pc, #432]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6213      	str	r3, [r2, #32]
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCC_OscConfig+0x36e>
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	4b64      	ldr	r3, [pc, #400]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a63      	ldr	r2, [pc, #396]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d015      	beq.n	8002caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff fb25 	bl	80022cc <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7ff fb21 	bl	80022cc <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0ab      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ee      	beq.n	8002c86 <HAL_RCC_OscConfig+0x37e>
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7ff fb0f 	bl	80022cc <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7ff fb0b 	bl	80022cc <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e095      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ee      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b48      	ldr	r3, [pc, #288]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a47      	ldr	r2, [pc, #284]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8081 	beq.w	8002df2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf0:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d061      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d146      	bne.n	8002d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_OscConfig+0x4fc>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7ff fadf 	bl	80022cc <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7ff fadb 	bl	80022cc <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e067      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d108      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d3a:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	492d      	ldr	r1, [pc, #180]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a19      	ldr	r1, [r3, #32]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	4927      	ldr	r1, [pc, #156]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x4fc>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7ff faaf 	bl	80022cc <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7ff faab 	bl	80022cc <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e037      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x46a>
 8002d90:	e02f      	b.n	8002df2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_RCC_OscConfig+0x4fc>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff fa98 	bl	80022cc <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7ff fa94 	bl	80022cc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e020      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x498>
 8002dbe:	e018      	b.n	8002df2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e013      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	42420060 	.word	0x42420060

08002e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0d0      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d910      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4965      	ldr	r1, [pc, #404]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0b8      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e64:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a58      	ldr	r2, [pc, #352]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e7c:	4b53      	ldr	r3, [pc, #332]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e88:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	494d      	ldr	r1, [pc, #308]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d040      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d115      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e07f      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e073      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e06b      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee6:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f023 0203 	bic.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4936      	ldr	r1, [pc, #216]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef8:	f7ff f9e8 	bl	80022cc <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f00:	f7ff f9e4 	bl	80022cc <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e053      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 020c 	and.w	r2, r3, #12
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d1eb      	bne.n	8002f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d210      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4922      	ldr	r1, [pc, #136]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e032      	b.n	8002fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4916      	ldr	r1, [pc, #88]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	490e      	ldr	r1, [pc, #56]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f96:	f000 f821 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	490a      	ldr	r1, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	5ccb      	ldrb	r3, [r1, r3]
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f946 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40022000 	.word	0x40022000
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08005874 	.word	0x08005874
 8002fd4:	20000074 	.word	0x20000074
 8002fd8:	20000078 	.word	0x20000078

08002fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	b490      	push	{r4, r7}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fe2:	4b2a      	ldr	r3, [pc, #168]	; (800308c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fe4:	1d3c      	adds	r4, r7, #4
 8002fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fec:	f240 2301 	movw	r3, #513	; 0x201
 8002ff0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003006:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d002      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x40>
 8003016:	2b08      	cmp	r3, #8
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x46>
 800301a:	e02d      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301e:	623b      	str	r3, [r7, #32]
      break;
 8003020:	e02d      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800302e:	4413      	add	r3, r2
 8003030:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003034:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c5b      	lsrs	r3, r3, #17
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800304e:	4413      	add	r3, r2
 8003050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800305a:	fb02 f203 	mul.w	r2, r2, r3
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	e004      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	623b      	str	r3, [r7, #32]
      break;
 8003076:	e002      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307a:	623b      	str	r3, [r7, #32]
      break;
 800307c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307e:	6a3b      	ldr	r3, [r7, #32]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3728      	adds	r7, #40	; 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bc90      	pop	{r4, r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	08005850 	.word	0x08005850
 8003090:	40021000 	.word	0x40021000
 8003094:	007a1200 	.word	0x007a1200
 8003098:	003d0900 	.word	0x003d0900

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <HAL_RCC_GetHCLKFreq+0x10>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000074 	.word	0x20000074

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b4:	f7ff fff2 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0adb      	lsrs	r3, r3, #11
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08005884 	.word	0x08005884

080030d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <RCC_Delay+0x34>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <RCC_Delay+0x38>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0a5b      	lsrs	r3, r3, #9
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030f4:	bf00      	nop
  }
  while (Delay --);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e5a      	subs	r2, r3, #1
 80030fa:	60fa      	str	r2, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f9      	bne.n	80030f4 <RCC_Delay+0x1c>
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	20000074 	.word	0x20000074
 8003110:	10624dd3 	.word	0x10624dd3

08003114 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d07d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003134:	4b4f      	ldr	r3, [pc, #316]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10d      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003140:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4a4b      	ldr	r2, [pc, #300]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	61d3      	str	r3, [r2, #28]
 800314c:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d118      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003168:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a42      	ldr	r2, [pc, #264]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003174:	f7ff f8aa 	bl	80022cc <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	e008      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7ff f8a6 	bl	80022cc <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e06d      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800319a:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02e      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d027      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031c2:	4b2e      	ldr	r3, [pc, #184]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d014      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7ff f875 	bl	80022cc <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7ff f871 	bl	80022cc <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e036      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ee      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003208:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4917      	ldr	r1, [pc, #92]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	4313      	orrs	r3, r2
 8003218:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	490b      	ldr	r1, [pc, #44]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4904      	ldr	r1, [pc, #16]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	42420440 	.word	0x42420440

08003280 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b08d      	sub	sp, #52	; 0x34
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003288:	4b5a      	ldr	r3, [pc, #360]	; (80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800328a:	f107 040c 	add.w	r4, r7, #12
 800328e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003294:	f240 2301 	movw	r3, #513	; 0x201
 8003298:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	2300      	movs	r3, #0
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	f200 8091 	bhi.w	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d04c      	beq.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d07c      	beq.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80032c8:	e089      	b.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80032ca:	4b4b      	ldr	r3, [pc, #300]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8082 	beq.w	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	0c9b      	lsrs	r3, r3, #18
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032ea:	4413      	add	r3, r2
 80032ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032f0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d018      	beq.n	800332e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0c5b      	lsrs	r3, r3, #17
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800330a:	4413      	add	r3, r2
 800330c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800331c:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	fbb2 f2f3 	udiv	r2, r2, r3
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332c:	e004      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	4a33      	ldr	r2, [pc, #204]	; (8003400 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003344:	d102      	bne.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800334a:	e04a      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4a2c      	ldr	r2, [pc, #176]	; (8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800335a:	e042      	b.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800335c:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336c:	d108      	bne.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	e01f      	b.n	80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338a:	d109      	bne.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003398:	f649 4340 	movw	r3, #40000	; 0x9c40
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
 800339e:	e00f      	b.n	80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033aa:	d11c      	bne.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80033b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033be:	e012      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80033c0:	e011      	b.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80033c2:	f7ff fe75 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0b9b      	lsrs	r3, r3, #14
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033dc:	e004      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80033e6:	bf00      	nop
    }
  }
  return (frequency);
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3734      	adds	r7, #52	; 0x34
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	08005860 	.word	0x08005860
 80033f8:	40021000 	.word	0x40021000
 80033fc:	007a1200 	.word	0x007a1200
 8003400:	003d0900 	.word	0x003d0900
 8003404:	aaaaaaab 	.word	0xaaaaaaab

08003408 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e084      	b.n	8003528 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7c5b      	ldrb	r3, [r3, #17]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fdb2 	bl	8001f98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 faf4 	bl	8003a28 <HAL_RTC_WaitForSynchro>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2204      	movs	r2, #4
 800344a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e06b      	b.n	8003528 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fbad 	bl	8003bb0 <RTC_EnterInitMode>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2204      	movs	r2, #4
 8003460:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e060      	b.n	8003528 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0207 	bic.w	r2, r2, #7
 8003474:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_RTC_Init+0x128>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_RTC_Init+0x128>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_RTC_Init+0x128>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4926      	ldr	r1, [pc, #152]	; (8003530 <HAL_RTC_Init+0x128>)
 8003498:	4313      	orrs	r3, r2
 800349a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d003      	beq.n	80034ae <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	e00e      	b.n	80034cc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80034ae:	2001      	movs	r0, #1
 80034b0:	f7ff fee6 	bl	8003280 <HAL_RCCEx_GetPeriphCLKFreq>
 80034b4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2204      	movs	r2, #4
 80034c0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e030      	b.n	8003528 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 010f 	bic.w	r1, r3, #15
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0c1a      	lsrs	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0c1b      	lsrs	r3, r3, #16
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	b291      	uxth	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fb81 	bl	8003c00 <RTC_ExitInitMode>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2204      	movs	r2, #4
 8003508:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e00c      	b.n	8003528 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003526:	2300      	movs	r3, #0
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40006c00 	.word	0x40006c00

08003534 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_RTC_SetTime+0x20>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e080      	b.n	800365a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	7c1b      	ldrb	r3, [r3, #16]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_RTC_SetTime+0x30>
 8003560:	2302      	movs	r3, #2
 8003562:	e07a      	b.n	800365a <HAL_RTC_SetTime+0x126>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2202      	movs	r2, #2
 800356e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003580:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	4619      	mov	r1, r3
 800358a:	460b      	mov	r3, r1
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a5b      	subs	r3, r3, r1
 8003590:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003592:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003598:	4413      	add	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e01e      	b.n	80035dc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fb71 	bl	8003c8a <RTC_Bcd2ToByte>
 80035a8:	4603      	mov	r3, r0
 80035aa:	461a      	mov	r2, r3
 80035ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80035b0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fb66 	bl	8003c8a <RTC_Bcd2ToByte>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80035ca:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	789b      	ldrb	r3, [r3, #2]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fb5a 	bl	8003c8a <RTC_Bcd2ToByte>
 80035d6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80035d8:	4423      	add	r3, r4
 80035da:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035dc:	6979      	ldr	r1, [r7, #20]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fa7f 	bl	8003ae2 <RTC_WriteTimeCounter>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2204      	movs	r2, #4
 80035ee:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e02f      	b.n	800365a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0205 	bic.w	r2, r2, #5
 8003608:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fa90 	bl	8003b30 <RTC_ReadAlarmCounter>
 8003610:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d018      	beq.n	800364c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	429a      	cmp	r2, r3
 8003620:	d214      	bcs.n	800364c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003628:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800362c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800362e:	6939      	ldr	r1, [r7, #16]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fa96 	bl	8003b62 <RTC_WriteAlarmCounter>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2204      	movs	r2, #4
 8003640:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e006      	b.n	800365a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2201      	movs	r2, #1
 8003650:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd90      	pop	{r4, r7, pc}
	...

08003664 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_RTC_GetTime+0x28>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0b5      	b.n	80037fc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0ac      	b.n	80037fc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f9ed 	bl	8003a82 <RTC_ReadTimeCounter>
 80036a8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4a55      	ldr	r2, [pc, #340]	; (8003804 <HAL_RTC_GetTime+0x1a0>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4b52      	ldr	r3, [pc, #328]	; (8003804 <HAL_RTC_GetTime+0x1a0>)
 80036ba:	fba3 1302 	umull	r1, r3, r3, r2
 80036be:	0adb      	lsrs	r3, r3, #11
 80036c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	4a4f      	ldr	r2, [pc, #316]	; (8003808 <HAL_RTC_GetTime+0x1a4>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4a4a      	ldr	r2, [pc, #296]	; (8003804 <HAL_RTC_GetTime+0x1a0>)
 80036dc:	fba2 1203 	umull	r1, r2, r2, r3
 80036e0:	0ad2      	lsrs	r2, r2, #11
 80036e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80036e6:	fb01 f202 	mul.w	r2, r1, r2
 80036ea:	1a9a      	subs	r2, r3, r2
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_RTC_GetTime+0x1a4>)
 80036ee:	fba3 1302 	umull	r1, r3, r3, r2
 80036f2:	0959      	lsrs	r1, r3, #5
 80036f4:	460b      	mov	r3, r1
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a5b      	subs	r3, r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	1ad1      	subs	r1, r2, r3
 80036fe:	b2ca      	uxtb	r2, r1
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b17      	cmp	r3, #23
 8003708:	d955      	bls.n	80037b6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4a3f      	ldr	r2, [pc, #252]	; (800380c <HAL_RTC_GetTime+0x1a8>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003716:	6939      	ldr	r1, [r7, #16]
 8003718:	4b3c      	ldr	r3, [pc, #240]	; (800380c <HAL_RTC_GetTime+0x1a8>)
 800371a:	fba3 2301 	umull	r2, r3, r3, r1
 800371e:	091a      	lsrs	r2, r3, #4
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	1aca      	subs	r2, r1, r3
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f9fd 	bl	8003b30 <RTC_ReadAlarmCounter>
 8003736:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373e:	d008      	beq.n	8003752 <HAL_RTC_GetTime+0xee>
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	429a      	cmp	r2, r3
 8003746:	d904      	bls.n	8003752 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e002      	b.n	8003758 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_RTC_GetTime+0x1ac>)
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f9ba 	bl	8003ae2 <RTC_WriteTimeCounter>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e041      	b.n	80037fc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d00c      	beq.n	800379a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4413      	add	r3, r2
 8003786:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003788:	69f9      	ldr	r1, [r7, #28]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f9e9 	bl	8003b62 <RTC_WriteAlarmCounter>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e030      	b.n	80037fc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800379a:	69f9      	ldr	r1, [r7, #28]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f9e0 	bl	8003b62 <RTC_WriteAlarmCounter>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e027      	b.n	80037fc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80037ac:	6979      	ldr	r1, [r7, #20]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fa88 	bl	8003cc4 <RTC_DateUpdate>
 80037b4:	e003      	b.n	80037be <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01a      	beq.n	80037fa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fa41 	bl	8003c50 <RTC_ByteToBcd2>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fa38 	bl	8003c50 <RTC_ByteToBcd2>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	789b      	ldrb	r3, [r3, #2]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fa2f 	bl	8003c50 <RTC_ByteToBcd2>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	91a2b3c5 	.word	0x91a2b3c5
 8003808:	88888889 	.word	0x88888889
 800380c:	aaaaaaab 	.word	0xaaaaaaab
 8003810:	00015180 	.word	0x00015180

08003814 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_RTC_SetDate+0x24>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e097      	b.n	800396c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	7c1b      	ldrb	r3, [r3, #16]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_RTC_SetDate+0x34>
 8003844:	2302      	movs	r3, #2
 8003846:	e091      	b.n	800396c <HAL_RTC_SetDate+0x158>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2202      	movs	r2, #2
 8003852:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10c      	bne.n	8003874 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	78da      	ldrb	r2, [r3, #3]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785a      	ldrb	r2, [r3, #1]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	789a      	ldrb	r2, [r3, #2]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	739a      	strb	r2, [r3, #14]
 8003872:	e01a      	b.n	80038aa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa06 	bl	8003c8a <RTC_Bcd2ToByte>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f9fd 	bl	8003c8a <RTC_Bcd2ToByte>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	789b      	ldrb	r3, [r3, #2]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f9f4 	bl	8003c8a <RTC_Bcd2ToByte>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	7bdb      	ldrb	r3, [r3, #15]
 80038ae:	4618      	mov	r0, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	7b59      	ldrb	r1, [r3, #13]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	7b9b      	ldrb	r3, [r3, #14]
 80038b8:	461a      	mov	r2, r3
 80038ba:	f000 fadf 	bl	8003e7c <RTC_WeekDayNum>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	7b1a      	ldrb	r2, [r3, #12]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f8d7 	bl	8003a82 <RTC_ReadTimeCounter>
 80038d4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	4a26      	ldr	r2, [pc, #152]	; (8003974 <HAL_RTC_SetDate+0x160>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0adb      	lsrs	r3, r3, #11
 80038e0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b18      	cmp	r3, #24
 80038e6:	d93a      	bls.n	800395e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_RTC_SetDate+0x164>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	4a22      	ldr	r2, [pc, #136]	; (800397c <HAL_RTC_SetDate+0x168>)
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80038fe:	69f9      	ldr	r1, [r7, #28]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f8ee 	bl	8003ae2 <RTC_WriteTimeCounter>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2204      	movs	r2, #4
 8003910:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e027      	b.n	800396c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f907 	bl	8003b30 <RTC_ReadAlarmCounter>
 8003922:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d018      	beq.n	800395e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	429a      	cmp	r2, r3
 8003932:	d214      	bcs.n	800395e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800393a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800393e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003940:	69b9      	ldr	r1, [r7, #24]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f90d 	bl	8003b62 <RTC_WriteAlarmCounter>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2204      	movs	r2, #4
 8003952:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e006      	b.n	800396c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	91a2b3c5 	.word	0x91a2b3c5
 8003978:	aaaaaaab 	.word	0xaaaaaaab
 800397c:	00015180 	.word	0x00015180

08003980 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2100      	movs	r1, #0
 8003992:	460a      	mov	r2, r1
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	460a      	mov	r2, r1
 8003998:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_RTC_GetDate+0x26>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e03a      	b.n	8003a20 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	2200      	movs	r2, #0
 80039b0:	4619      	mov	r1, r3
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff fe56 	bl	8003664 <HAL_RTC_GetTime>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e02e      	b.n	8003a20 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	7b1a      	ldrb	r2, [r3, #12]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	7bda      	ldrb	r2, [r3, #15]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	7b5a      	ldrb	r2, [r3, #13]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	7b9a      	ldrb	r2, [r3, #14]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01a      	beq.n	8003a1e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	78db      	ldrb	r3, [r3, #3]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f92f 	bl	8003c50 <RTC_ByteToBcd2>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f926 	bl	8003c50 <RTC_ByteToBcd2>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	789b      	ldrb	r3, [r3, #2]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f91d 	bl	8003c50 <RTC_ByteToBcd2>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e01d      	b.n	8003a7a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a4e:	f7fe fc3d 	bl	80022cc <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a54:	e009      	b.n	8003a6a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a56:	f7fe fc39 	bl	80022cc <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a64:	d901      	bls.n	8003a6a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e007      	b.n	8003a7a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b087      	sub	sp, #28
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	827b      	strh	r3, [r7, #18]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	823b      	strh	r3, [r7, #16]
 8003a92:	2300      	movs	r3, #0
 8003a94:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003ab2:	8a7a      	ldrh	r2, [r7, #18]
 8003ab4:	8a3b      	ldrh	r3, [r7, #16]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d008      	beq.n	8003acc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003aba:	8a3b      	ldrh	r3, [r7, #16]
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e004      	b.n	8003ad6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003acc:	8a7b      	ldrh	r3, [r7, #18]
 8003ace:	041a      	lsls	r2, r3, #16
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003ad6:	697b      	ldr	r3, [r7, #20]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f85d 	bl	8003bb0 <RTC_EnterInitMode>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
 8003b00:	e011      	b.n	8003b26 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	0c12      	lsrs	r2, r2, #16
 8003b0a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b292      	uxth	r2, r2
 8003b14:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f872 	bl	8003c00 <RTC_ExitInitMode>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	81fb      	strh	r3, [r7, #14]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003b50:	89fb      	ldrh	r3, [r7, #14]
 8003b52:	041a      	lsls	r2, r3, #16
 8003b54:	89bb      	ldrh	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f81d 	bl	8003bb0 <RTC_EnterInitMode>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e011      	b.n	8003ba6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	0c12      	lsrs	r2, r2, #16
 8003b8a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b292      	uxth	r2, r2
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f832 	bl	8003c00 <RTC_ExitInitMode>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003bbc:	f7fe fb86 	bl	80022cc <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bc2:	e009      	b.n	8003bd8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bc4:	f7fe fb82 	bl	80022cc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bd2:	d901      	bls.n	8003bd8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e00f      	b.n	8003bf8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ee      	beq.n	8003bc4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0210 	orr.w	r2, r2, #16
 8003bf4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0210 	bic.w	r2, r2, #16
 8003c1a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003c1c:	f7fe fb56 	bl	80022cc <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c22:	e009      	b.n	8003c38 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c24:	f7fe fb52 	bl	80022cc <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c32:	d901      	bls.n	8003c38 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e007      	b.n	8003c48 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003c5e:	e005      	b.n	8003c6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	3b0a      	subs	r3, #10
 8003c6a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	d8f6      	bhi.n	8003c60 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b2db      	uxtb	r3, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7bdb      	ldrb	r3, [r3, #15]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7b5b      	ldrb	r3, [r3, #13]
 8003ce8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7b9b      	ldrb	r3, [r3, #14]
 8003cee:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	e06f      	b.n	8003dd6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d011      	beq.n	8003d20 <RTC_DateUpdate+0x5c>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d00e      	beq.n	8003d20 <RTC_DateUpdate+0x5c>
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d00b      	beq.n	8003d20 <RTC_DateUpdate+0x5c>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b07      	cmp	r3, #7
 8003d0c:	d008      	beq.n	8003d20 <RTC_DateUpdate+0x5c>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d005      	beq.n	8003d20 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b0a      	cmp	r3, #10
 8003d18:	d002      	beq.n	8003d20 <RTC_DateUpdate+0x5c>
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	d117      	bne.n	8003d50 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b1e      	cmp	r3, #30
 8003d24:	d803      	bhi.n	8003d2e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003d2c:	e050      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d005      	beq.n	8003d40 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3301      	adds	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003d3e:	e047      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003d40:	2301      	movs	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
          year++;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003d4e:	e03f      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d008      	beq.n	8003d68 <RTC_DateUpdate+0xa4>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d005      	beq.n	8003d68 <RTC_DateUpdate+0xa4>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d002      	beq.n	8003d68 <RTC_DateUpdate+0xa4>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b0b      	cmp	r3, #11
 8003d66:	d10c      	bne.n	8003d82 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b1d      	cmp	r3, #29
 8003d6c:	d803      	bhi.n	8003d76 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d74:	e02c      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d80:	e026      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d123      	bne.n	8003dd0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b1b      	cmp	r3, #27
 8003d8c:	d803      	bhi.n	8003d96 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e01c      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b1c      	cmp	r3, #28
 8003d9a:	d111      	bne.n	8003dc0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f839 	bl	8003e18 <RTC_IsLeapYear>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e00d      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	3301      	adds	r3, #1
 8003db8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e007      	b.n	8003dd0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b1d      	cmp	r3, #29
 8003dc4:	d104      	bne.n	8003dd0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d38b      	bcc.n	8003cf6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6978      	ldr	r0, [r7, #20]
 8003e02:	f000 f83b 	bl	8003e7c <RTC_WeekDayNum>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	731a      	strb	r2, [r3, #12]
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e01d      	b.n	8003e6e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <RTC_IsLeapYear+0x60>)
 8003e36:	fba2 1203 	umull	r1, r2, r2, r3
 8003e3a:	0952      	lsrs	r2, r2, #5
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	fb01 f202 	mul.w	r2, r1, r2
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e00f      	b.n	8003e6e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <RTC_IsLeapYear+0x60>)
 8003e52:	fba2 1203 	umull	r1, r2, r2, r3
 8003e56:	09d2      	lsrs	r2, r2, #7
 8003e58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003e5c:	fb01 f202 	mul.w	r2, r1, r2
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003e6c:	2300      	movs	r3, #0
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	51eb851f 	.word	0x51eb851f

08003e7c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	70fb      	strb	r3, [r7, #3]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003e9a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d82d      	bhi.n	8003efe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <RTC_WeekDayNum+0xe4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	085a      	lsrs	r2, r3, #1
 8003eb6:	78bb      	ldrb	r3, [r7, #2]
 8003eb8:	441a      	add	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	4926      	ldr	r1, [pc, #152]	; (8003f64 <RTC_WeekDayNum+0xe8>)
 8003ecc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	1ad2      	subs	r2, r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	4922      	ldr	r1, [pc, #136]	; (8003f64 <RTC_WeekDayNum+0xe8>)
 8003eda:	fba1 1303 	umull	r1, r3, r1, r3
 8003ede:	09db      	lsrs	r3, r3, #7
 8003ee0:	4413      	add	r3, r2
 8003ee2:	1d1a      	adds	r2, r3, #4
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <RTC_WeekDayNum+0xec>)
 8003ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eea:	1ad1      	subs	r1, r2, r3
 8003eec:	0849      	lsrs	r1, r1, #1
 8003eee:	440b      	add	r3, r1
 8003ef0:	0899      	lsrs	r1, r3, #2
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e029      	b.n	8003f52 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <RTC_WeekDayNum+0xe4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	085a      	lsrs	r2, r3, #1
 8003f12:	78bb      	ldrb	r3, [r7, #2]
 8003f14:	441a      	add	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	441a      	add	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4910      	ldr	r1, [pc, #64]	; (8003f64 <RTC_WeekDayNum+0xe8>)
 8003f24:	fba1 1303 	umull	r1, r3, r1, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	490d      	ldr	r1, [pc, #52]	; (8003f64 <RTC_WeekDayNum+0xe8>)
 8003f30:	fba1 1303 	umull	r1, r3, r1, r3
 8003f34:	09db      	lsrs	r3, r3, #7
 8003f36:	4413      	add	r3, r2
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <RTC_WeekDayNum+0xec>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	1ad1      	subs	r1, r2, r3
 8003f42:	0849      	lsrs	r1, r1, #1
 8003f44:	440b      	add	r3, r1
 8003f46:	0899      	lsrs	r1, r3, #2
 8003f48:	460b      	mov	r3, r1
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	1a5b      	subs	r3, r3, r1
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	b2db      	uxtb	r3, r3
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	38e38e39 	.word	0x38e38e39
 8003f64:	51eb851f 	.word	0x51eb851f
 8003f68:	24924925 	.word	0x24924925

08003f6c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_RTCEx_BKUPWrite+0x30>)
 8003f7e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4413      	add	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	b292      	uxth	r2, r2
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40006c00 	.word	0x40006c00

08003fa0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_RTCEx_BKUPRead+0x34>)
 8003fb4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	40006c00 	.word	0x40006c00

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd ffee 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fc28 	bl	800486c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e03a      	b.n	8004106 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_TIM_Base_Start_IT+0x98>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x58>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ba:	d009      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x58>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a14      	ldr	r2, [pc, #80]	; (8004114 <HAL_TIM_Base_Start_IT+0x9c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x58>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a13      	ldr	r2, [pc, #76]	; (8004118 <HAL_TIM_Base_Start_IT+0xa0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d111      	bne.n	80040f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d010      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	e007      	b.n	8004104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800

0800411c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e041      	b.n	80041b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f839 	bl	80041ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4610      	mov	r0, r2
 800415c:	f000 fb86 	bl	800486c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_TIM_PWM_Start+0x24>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e022      	b.n	8004236 <HAL_TIM_PWM_Start+0x6a>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d109      	bne.n	800420a <HAL_TIM_PWM_Start+0x3e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	e015      	b.n	8004236 <HAL_TIM_PWM_Start+0x6a>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d109      	bne.n	8004224 <HAL_TIM_PWM_Start+0x58>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	e008      	b.n	8004236 <HAL_TIM_PWM_Start+0x6a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e05e      	b.n	80042fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start+0x82>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800424c:	e013      	b.n	8004276 <HAL_TIM_PWM_Start+0xaa>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start+0x92>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800425c:	e00b      	b.n	8004276 <HAL_TIM_PWM_Start+0xaa>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start+0xa2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800426c:	e003      	b.n	8004276 <HAL_TIM_PWM_Start+0xaa>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fd74 	bl	8004d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_TIM_PWM_Start+0x138>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d107      	bne.n	800429e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_TIM_PWM_Start+0x138>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIM_PWM_Start+0xfa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d009      	beq.n	80042c6 <HAL_TIM_PWM_Start+0xfa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_TIM_PWM_Start+0x13c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_PWM_Start+0xfa>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <HAL_TIM_PWM_Start+0x140>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d010      	beq.n	80042fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	e007      	b.n	80042fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800

08004310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b02      	cmp	r3, #2
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b02      	cmp	r3, #2
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0202 	mvn.w	r2, #2
 800433c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa6f 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa62 	bl	8004824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fa71 	bl	8004848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b04      	cmp	r3, #4
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0204 	mvn.w	r2, #4
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa45 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa38 	bl	8004824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa47 	bl	8004848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d122      	bne.n	8004414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d11b      	bne.n	8004414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0208 	mvn.w	r2, #8
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa1b 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa0e 	bl	8004824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fa1d 	bl	8004848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b10      	cmp	r3, #16
 8004420:	d122      	bne.n	8004468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b10      	cmp	r3, #16
 800442e:	d11b      	bne.n	8004468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0210 	mvn.w	r2, #16
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2208      	movs	r2, #8
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9f1 	bl	8004836 <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9e4 	bl	8004824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f9f3 	bl	8004848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0201 	mvn.w	r2, #1
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fc30 	bl	8001cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fce1 	bl	8004e82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f9b7 	bl	800485a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b20      	cmp	r3, #32
 8004506:	d107      	bne.n	8004518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0220 	mvn.w	r2, #32
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fcac 	bl	8004e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004536:	2302      	movs	r3, #2
 8004538:	e0ac      	b.n	8004694 <HAL_TIM_PWM_ConfigChannel+0x174>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	f200 809f 	bhi.w	8004688 <HAL_TIM_PWM_ConfigChannel+0x168>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004585 	.word	0x08004585
 8004554:	08004689 	.word	0x08004689
 8004558:	08004689 	.word	0x08004689
 800455c:	08004689 	.word	0x08004689
 8004560:	080045c5 	.word	0x080045c5
 8004564:	08004689 	.word	0x08004689
 8004568:	08004689 	.word	0x08004689
 800456c:	08004689 	.word	0x08004689
 8004570:	08004607 	.word	0x08004607
 8004574:	08004689 	.word	0x08004689
 8004578:	08004689 	.word	0x08004689
 800457c:	08004689 	.word	0x08004689
 8004580:	08004647 	.word	0x08004647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f9d0 	bl	8004930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
      break;
 80045c2:	e062      	b.n	800468a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa16 	bl	80049fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
      break;
 8004604:	e041      	b.n	800468a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fa5f 	bl	8004ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
      break;
 8004644:	e021      	b.n	800468a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 faa9 	bl	8004ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
      break;
 8004686:	e000      	b.n	800468a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004688:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_ConfigClockSource+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e0b3      	b.n	800481c <HAL_TIM_ConfigClockSource+0x180>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ec:	d03e      	beq.n	800476c <HAL_TIM_ConfigClockSource+0xd0>
 80046ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f2:	f200 8087 	bhi.w	8004804 <HAL_TIM_ConfigClockSource+0x168>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	f000 8085 	beq.w	8004808 <HAL_TIM_ConfigClockSource+0x16c>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d87f      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 8004704:	2b70      	cmp	r3, #112	; 0x70
 8004706:	d01a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xa2>
 8004708:	2b70      	cmp	r3, #112	; 0x70
 800470a:	d87b      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 800470c:	2b60      	cmp	r3, #96	; 0x60
 800470e:	d050      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x116>
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d877      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 8004714:	2b50      	cmp	r3, #80	; 0x50
 8004716:	d03c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xf6>
 8004718:	2b50      	cmp	r3, #80	; 0x50
 800471a:	d873      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d058      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x136>
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d86f      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d064      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x156>
 8004728:	2b30      	cmp	r3, #48	; 0x30
 800472a:	d86b      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d060      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x156>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d867      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x156>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d05a      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800473c:	e062      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6899      	ldr	r1, [r3, #8]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f000 faee 	bl	8004d2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004760:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	609a      	str	r2, [r3, #8]
      break;
 800476a:	e04e      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6899      	ldr	r1, [r3, #8]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f000 fad7 	bl	8004d2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800478e:	609a      	str	r2, [r3, #8]
      break;
 8004790:	e03b      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 fa4e 	bl	8004c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2150      	movs	r1, #80	; 0x50
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 faa5 	bl	8004cfa <TIM_ITRx_SetConfig>
      break;
 80047b0:	e02b      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 fa6c 	bl	8004c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2160      	movs	r1, #96	; 0x60
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fa95 	bl	8004cfa <TIM_ITRx_SetConfig>
      break;
 80047d0:	e01b      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 fa2e 	bl	8004c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2140      	movs	r1, #64	; 0x40
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fa85 	bl	8004cfa <TIM_ITRx_SetConfig>
      break;
 80047f0:	e00b      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f000 fa7c 	bl	8004cfa <TIM_ITRx_SetConfig>
        break;
 8004802:	e002      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a29      	ldr	r2, [pc, #164]	; (8004924 <TIM_Base_SetConfig+0xb8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0x30>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0x30>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_Base_SetConfig+0xbc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0x30>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a25      	ldr	r2, [pc, #148]	; (800492c <TIM_Base_SetConfig+0xc0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d108      	bne.n	80048ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <TIM_Base_SetConfig+0xb8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0x62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0x62>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a19      	ldr	r2, [pc, #100]	; (8004928 <TIM_Base_SetConfig+0xbc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0x62>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <TIM_Base_SetConfig+0xc0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a07      	ldr	r2, [pc, #28]	; (8004924 <TIM_Base_SetConfig+0xb8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d103      	bne.n	8004914 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	615a      	str	r2, [r3, #20]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800

08004930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 0302 	bic.w	r3, r3, #2
 8004978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <TIM_OC1_SetConfig+0xc8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10c      	bne.n	80049a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0308 	bic.w	r3, r3, #8
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <TIM_OC1_SetConfig+0xc8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d111      	bne.n	80049d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40012c00 	.word	0x40012c00

080049fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0210 	bic.w	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0320 	bic.w	r3, r3, #32
 8004a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <TIM_OC2_SetConfig+0xd0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d10d      	bne.n	8004a78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM_OC2_SetConfig+0xd0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d113      	bne.n	8004aa8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	40012c00 	.word	0x40012c00

08004ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <TIM_OC3_SetConfig+0xd0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d10d      	bne.n	8004b4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <TIM_OC3_SetConfig+0xd0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d113      	bne.n	8004b7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00

08004ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	031b      	lsls	r3, r3, #12
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <TIM_OC4_SetConfig+0x98>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d109      	bne.n	8004c18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	019b      	lsls	r3, r3, #6
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	621a      	str	r2, [r3, #32]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40012c00 	.word	0x40012c00

08004c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 0201 	bic.w	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 030a 	bic.w	r3, r3, #10
 8004c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f023 0210 	bic.w	r2, r3, #16
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	031b      	lsls	r3, r3, #12
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f043 0307 	orr.w	r3, r3, #7
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b087      	sub	sp, #28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	021a      	lsls	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	609a      	str	r2, [r3, #8]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	2201      	movs	r2, #1
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	401a      	ands	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a1a      	ldr	r2, [r3, #32]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	431a      	orrs	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e046      	b.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e18:	d009      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a10      	ldr	r2, [pc, #64]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10c      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800

08004e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <__errno>:
 8004e94:	4b01      	ldr	r3, [pc, #4]	; (8004e9c <__errno+0x8>)
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20000080 	.word	0x20000080

08004ea0 <__libc_init_array>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	4d0c      	ldr	r5, [pc, #48]	; (8004ed8 <__libc_init_array+0x38>)
 8004ea6:	4c0d      	ldr	r4, [pc, #52]	; (8004edc <__libc_init_array+0x3c>)
 8004ea8:	1b64      	subs	r4, r4, r5
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	42a6      	cmp	r6, r4
 8004eae:	d109      	bne.n	8004ec4 <__libc_init_array+0x24>
 8004eb0:	f000 fc5c 	bl	800576c <_init>
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	4d0a      	ldr	r5, [pc, #40]	; (8004ee0 <__libc_init_array+0x40>)
 8004eb8:	4c0a      	ldr	r4, [pc, #40]	; (8004ee4 <__libc_init_array+0x44>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	42a6      	cmp	r6, r4
 8004ec0:	d105      	bne.n	8004ece <__libc_init_array+0x2e>
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec8:	4798      	blx	r3
 8004eca:	3601      	adds	r6, #1
 8004ecc:	e7ee      	b.n	8004eac <__libc_init_array+0xc>
 8004ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed2:	4798      	blx	r3
 8004ed4:	3601      	adds	r6, #1
 8004ed6:	e7f2      	b.n	8004ebe <__libc_init_array+0x1e>
 8004ed8:	080058c0 	.word	0x080058c0
 8004edc:	080058c0 	.word	0x080058c0
 8004ee0:	080058c0 	.word	0x080058c0
 8004ee4:	080058c4 	.word	0x080058c4

08004ee8 <memset>:
 8004ee8:	4603      	mov	r3, r0
 8004eea:	4402      	add	r2, r0
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <memset+0xa>
 8004ef0:	4770      	bx	lr
 8004ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef6:	e7f9      	b.n	8004eec <memset+0x4>

08004ef8 <siprintf>:
 8004ef8:	b40e      	push	{r1, r2, r3}
 8004efa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004efe:	b500      	push	{lr}
 8004f00:	b09c      	sub	sp, #112	; 0x70
 8004f02:	ab1d      	add	r3, sp, #116	; 0x74
 8004f04:	9002      	str	r0, [sp, #8]
 8004f06:	9006      	str	r0, [sp, #24]
 8004f08:	9107      	str	r1, [sp, #28]
 8004f0a:	9104      	str	r1, [sp, #16]
 8004f0c:	4808      	ldr	r0, [pc, #32]	; (8004f30 <siprintf+0x38>)
 8004f0e:	4909      	ldr	r1, [pc, #36]	; (8004f34 <siprintf+0x3c>)
 8004f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f14:	9105      	str	r1, [sp, #20]
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	a902      	add	r1, sp, #8
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	f000 f868 	bl	8004ff0 <_svfiprintf_r>
 8004f20:	2200      	movs	r2, #0
 8004f22:	9b02      	ldr	r3, [sp, #8]
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	b01c      	add	sp, #112	; 0x70
 8004f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f2c:	b003      	add	sp, #12
 8004f2e:	4770      	bx	lr
 8004f30:	20000080 	.word	0x20000080
 8004f34:	ffff0208 	.word	0xffff0208

08004f38 <__ssputs_r>:
 8004f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	688e      	ldr	r6, [r1, #8]
 8004f3e:	4682      	mov	sl, r0
 8004f40:	429e      	cmp	r6, r3
 8004f42:	460c      	mov	r4, r1
 8004f44:	4690      	mov	r8, r2
 8004f46:	461f      	mov	r7, r3
 8004f48:	d838      	bhi.n	8004fbc <__ssputs_r+0x84>
 8004f4a:	898a      	ldrh	r2, [r1, #12]
 8004f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f50:	d032      	beq.n	8004fb8 <__ssputs_r+0x80>
 8004f52:	6825      	ldr	r5, [r4, #0]
 8004f54:	6909      	ldr	r1, [r1, #16]
 8004f56:	3301      	adds	r3, #1
 8004f58:	eba5 0901 	sub.w	r9, r5, r1
 8004f5c:	6965      	ldr	r5, [r4, #20]
 8004f5e:	444b      	add	r3, r9
 8004f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f68:	106d      	asrs	r5, r5, #1
 8004f6a:	429d      	cmp	r5, r3
 8004f6c:	bf38      	it	cc
 8004f6e:	461d      	movcc	r5, r3
 8004f70:	0553      	lsls	r3, r2, #21
 8004f72:	d531      	bpl.n	8004fd8 <__ssputs_r+0xa0>
 8004f74:	4629      	mov	r1, r5
 8004f76:	f000 fb53 	bl	8005620 <_malloc_r>
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	b950      	cbnz	r0, 8004f94 <__ssputs_r+0x5c>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	f8ca 3000 	str.w	r3, [sl]
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	464a      	mov	r2, r9
 8004f96:	6921      	ldr	r1, [r4, #16]
 8004f98:	f000 face 	bl	8005538 <memcpy>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	6126      	str	r6, [r4, #16]
 8004faa:	444e      	add	r6, r9
 8004fac:	6026      	str	r6, [r4, #0]
 8004fae:	463e      	mov	r6, r7
 8004fb0:	6165      	str	r5, [r4, #20]
 8004fb2:	eba5 0509 	sub.w	r5, r5, r9
 8004fb6:	60a5      	str	r5, [r4, #8]
 8004fb8:	42be      	cmp	r6, r7
 8004fba:	d900      	bls.n	8004fbe <__ssputs_r+0x86>
 8004fbc:	463e      	mov	r6, r7
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	f000 fac6 	bl	8005554 <memmove>
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	4432      	add	r2, r6
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	60a3      	str	r3, [r4, #8]
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	e7db      	b.n	8004f90 <__ssputs_r+0x58>
 8004fd8:	462a      	mov	r2, r5
 8004fda:	f000 fb7b 	bl	80056d4 <_realloc_r>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1e1      	bne.n	8004fa8 <__ssputs_r+0x70>
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	6921      	ldr	r1, [r4, #16]
 8004fe8:	f000 face 	bl	8005588 <_free_r>
 8004fec:	e7c7      	b.n	8004f7e <__ssputs_r+0x46>
	...

08004ff0 <_svfiprintf_r>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	4698      	mov	r8, r3
 8004ff6:	898b      	ldrh	r3, [r1, #12]
 8004ff8:	4607      	mov	r7, r0
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	460d      	mov	r5, r1
 8004ffe:	4614      	mov	r4, r2
 8005000:	b09d      	sub	sp, #116	; 0x74
 8005002:	d50e      	bpl.n	8005022 <_svfiprintf_r+0x32>
 8005004:	690b      	ldr	r3, [r1, #16]
 8005006:	b963      	cbnz	r3, 8005022 <_svfiprintf_r+0x32>
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	f000 fb09 	bl	8005620 <_malloc_r>
 800500e:	6028      	str	r0, [r5, #0]
 8005010:	6128      	str	r0, [r5, #16]
 8005012:	b920      	cbnz	r0, 800501e <_svfiprintf_r+0x2e>
 8005014:	230c      	movs	r3, #12
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	e0d1      	b.n	80051c2 <_svfiprintf_r+0x1d2>
 800501e:	2340      	movs	r3, #64	; 0x40
 8005020:	616b      	str	r3, [r5, #20]
 8005022:	2300      	movs	r3, #0
 8005024:	9309      	str	r3, [sp, #36]	; 0x24
 8005026:	2320      	movs	r3, #32
 8005028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800502c:	2330      	movs	r3, #48	; 0x30
 800502e:	f04f 0901 	mov.w	r9, #1
 8005032:	f8cd 800c 	str.w	r8, [sp, #12]
 8005036:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051dc <_svfiprintf_r+0x1ec>
 800503a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800503e:	4623      	mov	r3, r4
 8005040:	469a      	mov	sl, r3
 8005042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005046:	b10a      	cbz	r2, 800504c <_svfiprintf_r+0x5c>
 8005048:	2a25      	cmp	r2, #37	; 0x25
 800504a:	d1f9      	bne.n	8005040 <_svfiprintf_r+0x50>
 800504c:	ebba 0b04 	subs.w	fp, sl, r4
 8005050:	d00b      	beq.n	800506a <_svfiprintf_r+0x7a>
 8005052:	465b      	mov	r3, fp
 8005054:	4622      	mov	r2, r4
 8005056:	4629      	mov	r1, r5
 8005058:	4638      	mov	r0, r7
 800505a:	f7ff ff6d 	bl	8004f38 <__ssputs_r>
 800505e:	3001      	adds	r0, #1
 8005060:	f000 80aa 	beq.w	80051b8 <_svfiprintf_r+0x1c8>
 8005064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005066:	445a      	add	r2, fp
 8005068:	9209      	str	r2, [sp, #36]	; 0x24
 800506a:	f89a 3000 	ldrb.w	r3, [sl]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80a2 	beq.w	80051b8 <_svfiprintf_r+0x1c8>
 8005074:	2300      	movs	r3, #0
 8005076:	f04f 32ff 	mov.w	r2, #4294967295
 800507a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800507e:	f10a 0a01 	add.w	sl, sl, #1
 8005082:	9304      	str	r3, [sp, #16]
 8005084:	9307      	str	r3, [sp, #28]
 8005086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800508a:	931a      	str	r3, [sp, #104]	; 0x68
 800508c:	4654      	mov	r4, sl
 800508e:	2205      	movs	r2, #5
 8005090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005094:	4851      	ldr	r0, [pc, #324]	; (80051dc <_svfiprintf_r+0x1ec>)
 8005096:	f000 fa41 	bl	800551c <memchr>
 800509a:	9a04      	ldr	r2, [sp, #16]
 800509c:	b9d8      	cbnz	r0, 80050d6 <_svfiprintf_r+0xe6>
 800509e:	06d0      	lsls	r0, r2, #27
 80050a0:	bf44      	itt	mi
 80050a2:	2320      	movmi	r3, #32
 80050a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a8:	0711      	lsls	r1, r2, #28
 80050aa:	bf44      	itt	mi
 80050ac:	232b      	movmi	r3, #43	; 0x2b
 80050ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b2:	f89a 3000 	ldrb.w	r3, [sl]
 80050b6:	2b2a      	cmp	r3, #42	; 0x2a
 80050b8:	d015      	beq.n	80050e6 <_svfiprintf_r+0xf6>
 80050ba:	4654      	mov	r4, sl
 80050bc:	2000      	movs	r0, #0
 80050be:	f04f 0c0a 	mov.w	ip, #10
 80050c2:	9a07      	ldr	r2, [sp, #28]
 80050c4:	4621      	mov	r1, r4
 80050c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ca:	3b30      	subs	r3, #48	; 0x30
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	d94e      	bls.n	800516e <_svfiprintf_r+0x17e>
 80050d0:	b1b0      	cbz	r0, 8005100 <_svfiprintf_r+0x110>
 80050d2:	9207      	str	r2, [sp, #28]
 80050d4:	e014      	b.n	8005100 <_svfiprintf_r+0x110>
 80050d6:	eba0 0308 	sub.w	r3, r0, r8
 80050da:	fa09 f303 	lsl.w	r3, r9, r3
 80050de:	4313      	orrs	r3, r2
 80050e0:	46a2      	mov	sl, r4
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	e7d2      	b.n	800508c <_svfiprintf_r+0x9c>
 80050e6:	9b03      	ldr	r3, [sp, #12]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	9103      	str	r1, [sp, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfbb      	ittet	lt
 80050f2:	425b      	neglt	r3, r3
 80050f4:	f042 0202 	orrlt.w	r2, r2, #2
 80050f8:	9307      	strge	r3, [sp, #28]
 80050fa:	9307      	strlt	r3, [sp, #28]
 80050fc:	bfb8      	it	lt
 80050fe:	9204      	strlt	r2, [sp, #16]
 8005100:	7823      	ldrb	r3, [r4, #0]
 8005102:	2b2e      	cmp	r3, #46	; 0x2e
 8005104:	d10c      	bne.n	8005120 <_svfiprintf_r+0x130>
 8005106:	7863      	ldrb	r3, [r4, #1]
 8005108:	2b2a      	cmp	r3, #42	; 0x2a
 800510a:	d135      	bne.n	8005178 <_svfiprintf_r+0x188>
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	3402      	adds	r4, #2
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	9203      	str	r2, [sp, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	f04f 33ff 	movlt.w	r3, #4294967295
 800511e:	9305      	str	r3, [sp, #20]
 8005120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051ec <_svfiprintf_r+0x1fc>
 8005124:	2203      	movs	r2, #3
 8005126:	4650      	mov	r0, sl
 8005128:	7821      	ldrb	r1, [r4, #0]
 800512a:	f000 f9f7 	bl	800551c <memchr>
 800512e:	b140      	cbz	r0, 8005142 <_svfiprintf_r+0x152>
 8005130:	2340      	movs	r3, #64	; 0x40
 8005132:	eba0 000a 	sub.w	r0, r0, sl
 8005136:	fa03 f000 	lsl.w	r0, r3, r0
 800513a:	9b04      	ldr	r3, [sp, #16]
 800513c:	3401      	adds	r4, #1
 800513e:	4303      	orrs	r3, r0
 8005140:	9304      	str	r3, [sp, #16]
 8005142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005146:	2206      	movs	r2, #6
 8005148:	4825      	ldr	r0, [pc, #148]	; (80051e0 <_svfiprintf_r+0x1f0>)
 800514a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800514e:	f000 f9e5 	bl	800551c <memchr>
 8005152:	2800      	cmp	r0, #0
 8005154:	d038      	beq.n	80051c8 <_svfiprintf_r+0x1d8>
 8005156:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <_svfiprintf_r+0x1f4>)
 8005158:	bb1b      	cbnz	r3, 80051a2 <_svfiprintf_r+0x1b2>
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	3307      	adds	r3, #7
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	3308      	adds	r3, #8
 8005164:	9303      	str	r3, [sp, #12]
 8005166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005168:	4433      	add	r3, r6
 800516a:	9309      	str	r3, [sp, #36]	; 0x24
 800516c:	e767      	b.n	800503e <_svfiprintf_r+0x4e>
 800516e:	460c      	mov	r4, r1
 8005170:	2001      	movs	r0, #1
 8005172:	fb0c 3202 	mla	r2, ip, r2, r3
 8005176:	e7a5      	b.n	80050c4 <_svfiprintf_r+0xd4>
 8005178:	2300      	movs	r3, #0
 800517a:	f04f 0c0a 	mov.w	ip, #10
 800517e:	4619      	mov	r1, r3
 8005180:	3401      	adds	r4, #1
 8005182:	9305      	str	r3, [sp, #20]
 8005184:	4620      	mov	r0, r4
 8005186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800518a:	3a30      	subs	r2, #48	; 0x30
 800518c:	2a09      	cmp	r2, #9
 800518e:	d903      	bls.n	8005198 <_svfiprintf_r+0x1a8>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0c5      	beq.n	8005120 <_svfiprintf_r+0x130>
 8005194:	9105      	str	r1, [sp, #20]
 8005196:	e7c3      	b.n	8005120 <_svfiprintf_r+0x130>
 8005198:	4604      	mov	r4, r0
 800519a:	2301      	movs	r3, #1
 800519c:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a0:	e7f0      	b.n	8005184 <_svfiprintf_r+0x194>
 80051a2:	ab03      	add	r3, sp, #12
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	462a      	mov	r2, r5
 80051a8:	4638      	mov	r0, r7
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <_svfiprintf_r+0x1f8>)
 80051ac:	a904      	add	r1, sp, #16
 80051ae:	f3af 8000 	nop.w
 80051b2:	1c42      	adds	r2, r0, #1
 80051b4:	4606      	mov	r6, r0
 80051b6:	d1d6      	bne.n	8005166 <_svfiprintf_r+0x176>
 80051b8:	89ab      	ldrh	r3, [r5, #12]
 80051ba:	065b      	lsls	r3, r3, #25
 80051bc:	f53f af2c 	bmi.w	8005018 <_svfiprintf_r+0x28>
 80051c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051c2:	b01d      	add	sp, #116	; 0x74
 80051c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c8:	ab03      	add	r3, sp, #12
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	462a      	mov	r2, r5
 80051ce:	4638      	mov	r0, r7
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <_svfiprintf_r+0x1f8>)
 80051d2:	a904      	add	r1, sp, #16
 80051d4:	f000 f87c 	bl	80052d0 <_printf_i>
 80051d8:	e7eb      	b.n	80051b2 <_svfiprintf_r+0x1c2>
 80051da:	bf00      	nop
 80051dc:	0800588c 	.word	0x0800588c
 80051e0:	08005896 	.word	0x08005896
 80051e4:	00000000 	.word	0x00000000
 80051e8:	08004f39 	.word	0x08004f39
 80051ec:	08005892 	.word	0x08005892

080051f0 <_printf_common>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	4616      	mov	r6, r2
 80051f6:	4699      	mov	r9, r3
 80051f8:	688a      	ldr	r2, [r1, #8]
 80051fa:	690b      	ldr	r3, [r1, #16]
 80051fc:	4607      	mov	r7, r0
 80051fe:	4293      	cmp	r3, r2
 8005200:	bfb8      	it	lt
 8005202:	4613      	movlt	r3, r2
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800520a:	460c      	mov	r4, r1
 800520c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005210:	b10a      	cbz	r2, 8005216 <_printf_common+0x26>
 8005212:	3301      	adds	r3, #1
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	0699      	lsls	r1, r3, #26
 800521a:	bf42      	ittt	mi
 800521c:	6833      	ldrmi	r3, [r6, #0]
 800521e:	3302      	addmi	r3, #2
 8005220:	6033      	strmi	r3, [r6, #0]
 8005222:	6825      	ldr	r5, [r4, #0]
 8005224:	f015 0506 	ands.w	r5, r5, #6
 8005228:	d106      	bne.n	8005238 <_printf_common+0x48>
 800522a:	f104 0a19 	add.w	sl, r4, #25
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	6832      	ldr	r2, [r6, #0]
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	42ab      	cmp	r3, r5
 8005236:	dc28      	bgt.n	800528a <_printf_common+0x9a>
 8005238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800523c:	1e13      	subs	r3, r2, #0
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	bf18      	it	ne
 8005242:	2301      	movne	r3, #1
 8005244:	0692      	lsls	r2, r2, #26
 8005246:	d42d      	bmi.n	80052a4 <_printf_common+0xb4>
 8005248:	4649      	mov	r1, r9
 800524a:	4638      	mov	r0, r7
 800524c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005250:	47c0      	blx	r8
 8005252:	3001      	adds	r0, #1
 8005254:	d020      	beq.n	8005298 <_printf_common+0xa8>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	68e5      	ldr	r5, [r4, #12]
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	2b04      	cmp	r3, #4
 8005260:	bf18      	it	ne
 8005262:	2500      	movne	r5, #0
 8005264:	6832      	ldr	r2, [r6, #0]
 8005266:	f04f 0600 	mov.w	r6, #0
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	bf08      	it	eq
 800526e:	1aad      	subeq	r5, r5, r2
 8005270:	6922      	ldr	r2, [r4, #16]
 8005272:	bf08      	it	eq
 8005274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005278:	4293      	cmp	r3, r2
 800527a:	bfc4      	itt	gt
 800527c:	1a9b      	subgt	r3, r3, r2
 800527e:	18ed      	addgt	r5, r5, r3
 8005280:	341a      	adds	r4, #26
 8005282:	42b5      	cmp	r5, r6
 8005284:	d11a      	bne.n	80052bc <_printf_common+0xcc>
 8005286:	2000      	movs	r0, #0
 8005288:	e008      	b.n	800529c <_printf_common+0xac>
 800528a:	2301      	movs	r3, #1
 800528c:	4652      	mov	r2, sl
 800528e:	4649      	mov	r1, r9
 8005290:	4638      	mov	r0, r7
 8005292:	47c0      	blx	r8
 8005294:	3001      	adds	r0, #1
 8005296:	d103      	bne.n	80052a0 <_printf_common+0xb0>
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a0:	3501      	adds	r5, #1
 80052a2:	e7c4      	b.n	800522e <_printf_common+0x3e>
 80052a4:	2030      	movs	r0, #48	; 0x30
 80052a6:	18e1      	adds	r1, r4, r3
 80052a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052b2:	4422      	add	r2, r4
 80052b4:	3302      	adds	r3, #2
 80052b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ba:	e7c5      	b.n	8005248 <_printf_common+0x58>
 80052bc:	2301      	movs	r3, #1
 80052be:	4622      	mov	r2, r4
 80052c0:	4649      	mov	r1, r9
 80052c2:	4638      	mov	r0, r7
 80052c4:	47c0      	blx	r8
 80052c6:	3001      	adds	r0, #1
 80052c8:	d0e6      	beq.n	8005298 <_printf_common+0xa8>
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7d9      	b.n	8005282 <_printf_common+0x92>
	...

080052d0 <_printf_i>:
 80052d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d4:	460c      	mov	r4, r1
 80052d6:	7e27      	ldrb	r7, [r4, #24]
 80052d8:	4691      	mov	r9, r2
 80052da:	2f78      	cmp	r7, #120	; 0x78
 80052dc:	4680      	mov	r8, r0
 80052de:	469a      	mov	sl, r3
 80052e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e6:	d807      	bhi.n	80052f8 <_printf_i+0x28>
 80052e8:	2f62      	cmp	r7, #98	; 0x62
 80052ea:	d80a      	bhi.n	8005302 <_printf_i+0x32>
 80052ec:	2f00      	cmp	r7, #0
 80052ee:	f000 80d9 	beq.w	80054a4 <_printf_i+0x1d4>
 80052f2:	2f58      	cmp	r7, #88	; 0x58
 80052f4:	f000 80a4 	beq.w	8005440 <_printf_i+0x170>
 80052f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005300:	e03a      	b.n	8005378 <_printf_i+0xa8>
 8005302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005306:	2b15      	cmp	r3, #21
 8005308:	d8f6      	bhi.n	80052f8 <_printf_i+0x28>
 800530a:	a001      	add	r0, pc, #4	; (adr r0, 8005310 <_printf_i+0x40>)
 800530c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005310:	08005369 	.word	0x08005369
 8005314:	0800537d 	.word	0x0800537d
 8005318:	080052f9 	.word	0x080052f9
 800531c:	080052f9 	.word	0x080052f9
 8005320:	080052f9 	.word	0x080052f9
 8005324:	080052f9 	.word	0x080052f9
 8005328:	0800537d 	.word	0x0800537d
 800532c:	080052f9 	.word	0x080052f9
 8005330:	080052f9 	.word	0x080052f9
 8005334:	080052f9 	.word	0x080052f9
 8005338:	080052f9 	.word	0x080052f9
 800533c:	0800548b 	.word	0x0800548b
 8005340:	080053ad 	.word	0x080053ad
 8005344:	0800546d 	.word	0x0800546d
 8005348:	080052f9 	.word	0x080052f9
 800534c:	080052f9 	.word	0x080052f9
 8005350:	080054ad 	.word	0x080054ad
 8005354:	080052f9 	.word	0x080052f9
 8005358:	080053ad 	.word	0x080053ad
 800535c:	080052f9 	.word	0x080052f9
 8005360:	080052f9 	.word	0x080052f9
 8005364:	08005475 	.word	0x08005475
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800536e:	1d1a      	adds	r2, r3, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	600a      	str	r2, [r1, #0]
 8005374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005378:	2301      	movs	r3, #1
 800537a:	e0a4      	b.n	80054c6 <_printf_i+0x1f6>
 800537c:	6825      	ldr	r5, [r4, #0]
 800537e:	6808      	ldr	r0, [r1, #0]
 8005380:	062e      	lsls	r6, r5, #24
 8005382:	f100 0304 	add.w	r3, r0, #4
 8005386:	d50a      	bpl.n	800539e <_printf_i+0xce>
 8005388:	6805      	ldr	r5, [r0, #0]
 800538a:	600b      	str	r3, [r1, #0]
 800538c:	2d00      	cmp	r5, #0
 800538e:	da03      	bge.n	8005398 <_printf_i+0xc8>
 8005390:	232d      	movs	r3, #45	; 0x2d
 8005392:	426d      	negs	r5, r5
 8005394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005398:	230a      	movs	r3, #10
 800539a:	485e      	ldr	r0, [pc, #376]	; (8005514 <_printf_i+0x244>)
 800539c:	e019      	b.n	80053d2 <_printf_i+0x102>
 800539e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053a2:	6805      	ldr	r5, [r0, #0]
 80053a4:	600b      	str	r3, [r1, #0]
 80053a6:	bf18      	it	ne
 80053a8:	b22d      	sxthne	r5, r5
 80053aa:	e7ef      	b.n	800538c <_printf_i+0xbc>
 80053ac:	680b      	ldr	r3, [r1, #0]
 80053ae:	6825      	ldr	r5, [r4, #0]
 80053b0:	1d18      	adds	r0, r3, #4
 80053b2:	6008      	str	r0, [r1, #0]
 80053b4:	0628      	lsls	r0, r5, #24
 80053b6:	d501      	bpl.n	80053bc <_printf_i+0xec>
 80053b8:	681d      	ldr	r5, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <_printf_i+0xf2>
 80053bc:	0669      	lsls	r1, r5, #25
 80053be:	d5fb      	bpl.n	80053b8 <_printf_i+0xe8>
 80053c0:	881d      	ldrh	r5, [r3, #0]
 80053c2:	2f6f      	cmp	r7, #111	; 0x6f
 80053c4:	bf0c      	ite	eq
 80053c6:	2308      	moveq	r3, #8
 80053c8:	230a      	movne	r3, #10
 80053ca:	4852      	ldr	r0, [pc, #328]	; (8005514 <_printf_i+0x244>)
 80053cc:	2100      	movs	r1, #0
 80053ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053d2:	6866      	ldr	r6, [r4, #4]
 80053d4:	2e00      	cmp	r6, #0
 80053d6:	bfa8      	it	ge
 80053d8:	6821      	ldrge	r1, [r4, #0]
 80053da:	60a6      	str	r6, [r4, #8]
 80053dc:	bfa4      	itt	ge
 80053de:	f021 0104 	bicge.w	r1, r1, #4
 80053e2:	6021      	strge	r1, [r4, #0]
 80053e4:	b90d      	cbnz	r5, 80053ea <_printf_i+0x11a>
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	d04d      	beq.n	8005486 <_printf_i+0x1b6>
 80053ea:	4616      	mov	r6, r2
 80053ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80053f0:	fb03 5711 	mls	r7, r3, r1, r5
 80053f4:	5dc7      	ldrb	r7, [r0, r7]
 80053f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053fa:	462f      	mov	r7, r5
 80053fc:	42bb      	cmp	r3, r7
 80053fe:	460d      	mov	r5, r1
 8005400:	d9f4      	bls.n	80053ec <_printf_i+0x11c>
 8005402:	2b08      	cmp	r3, #8
 8005404:	d10b      	bne.n	800541e <_printf_i+0x14e>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	07df      	lsls	r7, r3, #31
 800540a:	d508      	bpl.n	800541e <_printf_i+0x14e>
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	6861      	ldr	r1, [r4, #4]
 8005410:	4299      	cmp	r1, r3
 8005412:	bfde      	ittt	le
 8005414:	2330      	movle	r3, #48	; 0x30
 8005416:	f806 3c01 	strble.w	r3, [r6, #-1]
 800541a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800541e:	1b92      	subs	r2, r2, r6
 8005420:	6122      	str	r2, [r4, #16]
 8005422:	464b      	mov	r3, r9
 8005424:	4621      	mov	r1, r4
 8005426:	4640      	mov	r0, r8
 8005428:	f8cd a000 	str.w	sl, [sp]
 800542c:	aa03      	add	r2, sp, #12
 800542e:	f7ff fedf 	bl	80051f0 <_printf_common>
 8005432:	3001      	adds	r0, #1
 8005434:	d14c      	bne.n	80054d0 <_printf_i+0x200>
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	b004      	add	sp, #16
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	4834      	ldr	r0, [pc, #208]	; (8005514 <_printf_i+0x244>)
 8005442:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005446:	680e      	ldr	r6, [r1, #0]
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	f856 5b04 	ldr.w	r5, [r6], #4
 800544e:	061f      	lsls	r7, r3, #24
 8005450:	600e      	str	r6, [r1, #0]
 8005452:	d514      	bpl.n	800547e <_printf_i+0x1ae>
 8005454:	07d9      	lsls	r1, r3, #31
 8005456:	bf44      	itt	mi
 8005458:	f043 0320 	orrmi.w	r3, r3, #32
 800545c:	6023      	strmi	r3, [r4, #0]
 800545e:	b91d      	cbnz	r5, 8005468 <_printf_i+0x198>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f023 0320 	bic.w	r3, r3, #32
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	2310      	movs	r3, #16
 800546a:	e7af      	b.n	80053cc <_printf_i+0xfc>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	f043 0320 	orr.w	r3, r3, #32
 8005472:	6023      	str	r3, [r4, #0]
 8005474:	2378      	movs	r3, #120	; 0x78
 8005476:	4828      	ldr	r0, [pc, #160]	; (8005518 <_printf_i+0x248>)
 8005478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800547c:	e7e3      	b.n	8005446 <_printf_i+0x176>
 800547e:	065e      	lsls	r6, r3, #25
 8005480:	bf48      	it	mi
 8005482:	b2ad      	uxthmi	r5, r5
 8005484:	e7e6      	b.n	8005454 <_printf_i+0x184>
 8005486:	4616      	mov	r6, r2
 8005488:	e7bb      	b.n	8005402 <_printf_i+0x132>
 800548a:	680b      	ldr	r3, [r1, #0]
 800548c:	6826      	ldr	r6, [r4, #0]
 800548e:	1d1d      	adds	r5, r3, #4
 8005490:	6960      	ldr	r0, [r4, #20]
 8005492:	600d      	str	r5, [r1, #0]
 8005494:	0635      	lsls	r5, r6, #24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	d501      	bpl.n	800549e <_printf_i+0x1ce>
 800549a:	6018      	str	r0, [r3, #0]
 800549c:	e002      	b.n	80054a4 <_printf_i+0x1d4>
 800549e:	0671      	lsls	r1, r6, #25
 80054a0:	d5fb      	bpl.n	800549a <_printf_i+0x1ca>
 80054a2:	8018      	strh	r0, [r3, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	4616      	mov	r6, r2
 80054a8:	6123      	str	r3, [r4, #16]
 80054aa:	e7ba      	b.n	8005422 <_printf_i+0x152>
 80054ac:	680b      	ldr	r3, [r1, #0]
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	600a      	str	r2, [r1, #0]
 80054b2:	681e      	ldr	r6, [r3, #0]
 80054b4:	2100      	movs	r1, #0
 80054b6:	4630      	mov	r0, r6
 80054b8:	6862      	ldr	r2, [r4, #4]
 80054ba:	f000 f82f 	bl	800551c <memchr>
 80054be:	b108      	cbz	r0, 80054c4 <_printf_i+0x1f4>
 80054c0:	1b80      	subs	r0, r0, r6
 80054c2:	6060      	str	r0, [r4, #4]
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	2300      	movs	r3, #0
 80054ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ce:	e7a8      	b.n	8005422 <_printf_i+0x152>
 80054d0:	4632      	mov	r2, r6
 80054d2:	4649      	mov	r1, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	47d0      	blx	sl
 80054da:	3001      	adds	r0, #1
 80054dc:	d0ab      	beq.n	8005436 <_printf_i+0x166>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	079b      	lsls	r3, r3, #30
 80054e2:	d413      	bmi.n	800550c <_printf_i+0x23c>
 80054e4:	68e0      	ldr	r0, [r4, #12]
 80054e6:	9b03      	ldr	r3, [sp, #12]
 80054e8:	4298      	cmp	r0, r3
 80054ea:	bfb8      	it	lt
 80054ec:	4618      	movlt	r0, r3
 80054ee:	e7a4      	b.n	800543a <_printf_i+0x16a>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4632      	mov	r2, r6
 80054f4:	4649      	mov	r1, r9
 80054f6:	4640      	mov	r0, r8
 80054f8:	47d0      	blx	sl
 80054fa:	3001      	adds	r0, #1
 80054fc:	d09b      	beq.n	8005436 <_printf_i+0x166>
 80054fe:	3501      	adds	r5, #1
 8005500:	68e3      	ldr	r3, [r4, #12]
 8005502:	9903      	ldr	r1, [sp, #12]
 8005504:	1a5b      	subs	r3, r3, r1
 8005506:	42ab      	cmp	r3, r5
 8005508:	dcf2      	bgt.n	80054f0 <_printf_i+0x220>
 800550a:	e7eb      	b.n	80054e4 <_printf_i+0x214>
 800550c:	2500      	movs	r5, #0
 800550e:	f104 0619 	add.w	r6, r4, #25
 8005512:	e7f5      	b.n	8005500 <_printf_i+0x230>
 8005514:	0800589d 	.word	0x0800589d
 8005518:	080058ae 	.word	0x080058ae

0800551c <memchr>:
 800551c:	4603      	mov	r3, r0
 800551e:	b510      	push	{r4, lr}
 8005520:	b2c9      	uxtb	r1, r1
 8005522:	4402      	add	r2, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	4618      	mov	r0, r3
 8005528:	d101      	bne.n	800552e <memchr+0x12>
 800552a:	2000      	movs	r0, #0
 800552c:	e003      	b.n	8005536 <memchr+0x1a>
 800552e:	7804      	ldrb	r4, [r0, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	428c      	cmp	r4, r1
 8005534:	d1f6      	bne.n	8005524 <memchr+0x8>
 8005536:	bd10      	pop	{r4, pc}

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	4291      	cmp	r1, r2
 800554c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <memmove>:
 8005554:	4288      	cmp	r0, r1
 8005556:	b510      	push	{r4, lr}
 8005558:	eb01 0402 	add.w	r4, r1, r2
 800555c:	d902      	bls.n	8005564 <memmove+0x10>
 800555e:	4284      	cmp	r4, r0
 8005560:	4623      	mov	r3, r4
 8005562:	d807      	bhi.n	8005574 <memmove+0x20>
 8005564:	1e43      	subs	r3, r0, #1
 8005566:	42a1      	cmp	r1, r4
 8005568:	d008      	beq.n	800557c <memmove+0x28>
 800556a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800556e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005572:	e7f8      	b.n	8005566 <memmove+0x12>
 8005574:	4601      	mov	r1, r0
 8005576:	4402      	add	r2, r0
 8005578:	428a      	cmp	r2, r1
 800557a:	d100      	bne.n	800557e <memmove+0x2a>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005586:	e7f7      	b.n	8005578 <memmove+0x24>

08005588 <_free_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4605      	mov	r5, r0
 800558c:	2900      	cmp	r1, #0
 800558e:	d043      	beq.n	8005618 <_free_r+0x90>
 8005590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005594:	1f0c      	subs	r4, r1, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	bfb8      	it	lt
 800559a:	18e4      	addlt	r4, r4, r3
 800559c:	f000 f8d0 	bl	8005740 <__malloc_lock>
 80055a0:	4a1e      	ldr	r2, [pc, #120]	; (800561c <_free_r+0x94>)
 80055a2:	6813      	ldr	r3, [r2, #0]
 80055a4:	4610      	mov	r0, r2
 80055a6:	b933      	cbnz	r3, 80055b6 <_free_r+0x2e>
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	6014      	str	r4, [r2, #0]
 80055ac:	4628      	mov	r0, r5
 80055ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055b2:	f000 b8cb 	b.w	800574c <__malloc_unlock>
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	d90a      	bls.n	80055d0 <_free_r+0x48>
 80055ba:	6821      	ldr	r1, [r4, #0]
 80055bc:	1862      	adds	r2, r4, r1
 80055be:	4293      	cmp	r3, r2
 80055c0:	bf01      	itttt	eq
 80055c2:	681a      	ldreq	r2, [r3, #0]
 80055c4:	685b      	ldreq	r3, [r3, #4]
 80055c6:	1852      	addeq	r2, r2, r1
 80055c8:	6022      	streq	r2, [r4, #0]
 80055ca:	6063      	str	r3, [r4, #4]
 80055cc:	6004      	str	r4, [r0, #0]
 80055ce:	e7ed      	b.n	80055ac <_free_r+0x24>
 80055d0:	461a      	mov	r2, r3
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	b10b      	cbz	r3, 80055da <_free_r+0x52>
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	d9fa      	bls.n	80055d0 <_free_r+0x48>
 80055da:	6811      	ldr	r1, [r2, #0]
 80055dc:	1850      	adds	r0, r2, r1
 80055de:	42a0      	cmp	r0, r4
 80055e0:	d10b      	bne.n	80055fa <_free_r+0x72>
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	4401      	add	r1, r0
 80055e6:	1850      	adds	r0, r2, r1
 80055e8:	4283      	cmp	r3, r0
 80055ea:	6011      	str	r1, [r2, #0]
 80055ec:	d1de      	bne.n	80055ac <_free_r+0x24>
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4401      	add	r1, r0
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	6053      	str	r3, [r2, #4]
 80055f8:	e7d8      	b.n	80055ac <_free_r+0x24>
 80055fa:	d902      	bls.n	8005602 <_free_r+0x7a>
 80055fc:	230c      	movs	r3, #12
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	e7d4      	b.n	80055ac <_free_r+0x24>
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	1821      	adds	r1, r4, r0
 8005606:	428b      	cmp	r3, r1
 8005608:	bf01      	itttt	eq
 800560a:	6819      	ldreq	r1, [r3, #0]
 800560c:	685b      	ldreq	r3, [r3, #4]
 800560e:	1809      	addeq	r1, r1, r0
 8005610:	6021      	streq	r1, [r4, #0]
 8005612:	6063      	str	r3, [r4, #4]
 8005614:	6054      	str	r4, [r2, #4]
 8005616:	e7c9      	b.n	80055ac <_free_r+0x24>
 8005618:	bd38      	pop	{r3, r4, r5, pc}
 800561a:	bf00      	nop
 800561c:	20000180 	.word	0x20000180

08005620 <_malloc_r>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	1ccd      	adds	r5, r1, #3
 8005624:	f025 0503 	bic.w	r5, r5, #3
 8005628:	3508      	adds	r5, #8
 800562a:	2d0c      	cmp	r5, #12
 800562c:	bf38      	it	cc
 800562e:	250c      	movcc	r5, #12
 8005630:	2d00      	cmp	r5, #0
 8005632:	4606      	mov	r6, r0
 8005634:	db01      	blt.n	800563a <_malloc_r+0x1a>
 8005636:	42a9      	cmp	r1, r5
 8005638:	d903      	bls.n	8005642 <_malloc_r+0x22>
 800563a:	230c      	movs	r3, #12
 800563c:	6033      	str	r3, [r6, #0]
 800563e:	2000      	movs	r0, #0
 8005640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005642:	f000 f87d 	bl	8005740 <__malloc_lock>
 8005646:	4921      	ldr	r1, [pc, #132]	; (80056cc <_malloc_r+0xac>)
 8005648:	680a      	ldr	r2, [r1, #0]
 800564a:	4614      	mov	r4, r2
 800564c:	b99c      	cbnz	r4, 8005676 <_malloc_r+0x56>
 800564e:	4f20      	ldr	r7, [pc, #128]	; (80056d0 <_malloc_r+0xb0>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	b923      	cbnz	r3, 800565e <_malloc_r+0x3e>
 8005654:	4621      	mov	r1, r4
 8005656:	4630      	mov	r0, r6
 8005658:	f000 f862 	bl	8005720 <_sbrk_r>
 800565c:	6038      	str	r0, [r7, #0]
 800565e:	4629      	mov	r1, r5
 8005660:	4630      	mov	r0, r6
 8005662:	f000 f85d 	bl	8005720 <_sbrk_r>
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d123      	bne.n	80056b2 <_malloc_r+0x92>
 800566a:	230c      	movs	r3, #12
 800566c:	4630      	mov	r0, r6
 800566e:	6033      	str	r3, [r6, #0]
 8005670:	f000 f86c 	bl	800574c <__malloc_unlock>
 8005674:	e7e3      	b.n	800563e <_malloc_r+0x1e>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	1b5b      	subs	r3, r3, r5
 800567a:	d417      	bmi.n	80056ac <_malloc_r+0x8c>
 800567c:	2b0b      	cmp	r3, #11
 800567e:	d903      	bls.n	8005688 <_malloc_r+0x68>
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	441c      	add	r4, r3
 8005684:	6025      	str	r5, [r4, #0]
 8005686:	e004      	b.n	8005692 <_malloc_r+0x72>
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	42a2      	cmp	r2, r4
 800568c:	bf0c      	ite	eq
 800568e:	600b      	streq	r3, [r1, #0]
 8005690:	6053      	strne	r3, [r2, #4]
 8005692:	4630      	mov	r0, r6
 8005694:	f000 f85a 	bl	800574c <__malloc_unlock>
 8005698:	f104 000b 	add.w	r0, r4, #11
 800569c:	1d23      	adds	r3, r4, #4
 800569e:	f020 0007 	bic.w	r0, r0, #7
 80056a2:	1ac2      	subs	r2, r0, r3
 80056a4:	d0cc      	beq.n	8005640 <_malloc_r+0x20>
 80056a6:	1a1b      	subs	r3, r3, r0
 80056a8:	50a3      	str	r3, [r4, r2]
 80056aa:	e7c9      	b.n	8005640 <_malloc_r+0x20>
 80056ac:	4622      	mov	r2, r4
 80056ae:	6864      	ldr	r4, [r4, #4]
 80056b0:	e7cc      	b.n	800564c <_malloc_r+0x2c>
 80056b2:	1cc4      	adds	r4, r0, #3
 80056b4:	f024 0403 	bic.w	r4, r4, #3
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d0e3      	beq.n	8005684 <_malloc_r+0x64>
 80056bc:	1a21      	subs	r1, r4, r0
 80056be:	4630      	mov	r0, r6
 80056c0:	f000 f82e 	bl	8005720 <_sbrk_r>
 80056c4:	3001      	adds	r0, #1
 80056c6:	d1dd      	bne.n	8005684 <_malloc_r+0x64>
 80056c8:	e7cf      	b.n	800566a <_malloc_r+0x4a>
 80056ca:	bf00      	nop
 80056cc:	20000180 	.word	0x20000180
 80056d0:	20000184 	.word	0x20000184

080056d4 <_realloc_r>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	4607      	mov	r7, r0
 80056d8:	4614      	mov	r4, r2
 80056da:	460e      	mov	r6, r1
 80056dc:	b921      	cbnz	r1, 80056e8 <_realloc_r+0x14>
 80056de:	4611      	mov	r1, r2
 80056e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056e4:	f7ff bf9c 	b.w	8005620 <_malloc_r>
 80056e8:	b922      	cbnz	r2, 80056f4 <_realloc_r+0x20>
 80056ea:	f7ff ff4d 	bl	8005588 <_free_r>
 80056ee:	4625      	mov	r5, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f4:	f000 f830 	bl	8005758 <_malloc_usable_size_r>
 80056f8:	42a0      	cmp	r0, r4
 80056fa:	d20f      	bcs.n	800571c <_realloc_r+0x48>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4638      	mov	r0, r7
 8005700:	f7ff ff8e 	bl	8005620 <_malloc_r>
 8005704:	4605      	mov	r5, r0
 8005706:	2800      	cmp	r0, #0
 8005708:	d0f2      	beq.n	80056f0 <_realloc_r+0x1c>
 800570a:	4631      	mov	r1, r6
 800570c:	4622      	mov	r2, r4
 800570e:	f7ff ff13 	bl	8005538 <memcpy>
 8005712:	4631      	mov	r1, r6
 8005714:	4638      	mov	r0, r7
 8005716:	f7ff ff37 	bl	8005588 <_free_r>
 800571a:	e7e9      	b.n	80056f0 <_realloc_r+0x1c>
 800571c:	4635      	mov	r5, r6
 800571e:	e7e7      	b.n	80056f0 <_realloc_r+0x1c>

08005720 <_sbrk_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	2300      	movs	r3, #0
 8005724:	4d05      	ldr	r5, [pc, #20]	; (800573c <_sbrk_r+0x1c>)
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	f7fc fd14 	bl	8002158 <_sbrk>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_sbrk_r+0x1a>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_sbrk_r+0x1a>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	200002a8 	.word	0x200002a8

08005740 <__malloc_lock>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__malloc_lock+0x8>)
 8005742:	f000 b811 	b.w	8005768 <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	200002b0 	.word	0x200002b0

0800574c <__malloc_unlock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_unlock+0x8>)
 800574e:	f000 b80c 	b.w	800576a <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	200002b0 	.word	0x200002b0

08005758 <_malloc_usable_size_r>:
 8005758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800575c:	1f18      	subs	r0, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	bfbc      	itt	lt
 8005762:	580b      	ldrlt	r3, [r1, r0]
 8005764:	18c0      	addlt	r0, r0, r3
 8005766:	4770      	bx	lr

08005768 <__retarget_lock_acquire_recursive>:
 8005768:	4770      	bx	lr

0800576a <__retarget_lock_release_recursive>:
 800576a:	4770      	bx	lr

0800576c <_init>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr

08005778 <_fini>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr
